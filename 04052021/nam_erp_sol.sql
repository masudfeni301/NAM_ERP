ALTER TABLE NAM_ERP_SOL.BANK_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.BANK_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.BANK_INFO
(
  ID              NUMBER,
  BANK_NAME       VARCHAR2(200 BYTE),
  SHORT_NAME      VARCHAR2(200 BYTE),
  ADDRESS         VARCHAR2(400 BYTE),
  PHONE           VARCHAR2(30 BYTE),
  EMAIL           VARCHAR2(100 BYTE),
  FAX             VARCHAR2(100 BYTE),
  CONTACT_PERSON  VARCHAR2(30 BYTE),
  STATUS          VARCHAR2(1 BYTE)              DEFAULT 'Y',
  BRANCH_CODE     VARCHAR2(50 BYTE),
  COMPANY_CODE    VARCHAR2(50 BYTE),
  CREATED_BY      VARCHAR2(50 BYTE),
  CREATED_ON      TIMESTAMP(6),
  CREATED_TIME    VARCHAR2(15 BYTE),
  MODIFIED_BY     VARCHAR2(50 BYTE),
  MODIFIED_ON     TIMESTAMP(6),
  MODIFIED_TIME   VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.BANK_INFO_PK ON NAM_ERP_SOL.BANK_INFO
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."BANK_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.BANK_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.BANK_INFO ADD (
  CONSTRAINT BANK_INFO_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.BANK_INFO_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.BANK_BRANCH_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.BANK_BRANCH_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.BANK_BRANCH_INFO
(
  ID              NUMBER,
  BANK_ID         NUMBER,
  BRANCH_NAME     VARCHAR2(200 BYTE),
  SHORT_NAME      VARCHAR2(200 BYTE),
  ADDRESS         VARCHAR2(400 BYTE),
  PHONE           VARCHAR2(30 BYTE),
  EMAIL           VARCHAR2(100 BYTE),
  FAX             VARCHAR2(100 BYTE),
  CONTACT_PERSON  VARCHAR2(30 BYTE),
  STATUS          VARCHAR2(1 BYTE)              DEFAULT 'Y',
  BRANCH_CODE     VARCHAR2(50 BYTE),
  COMPANY_CODE    VARCHAR2(50 BYTE),
  CREATED_BY      VARCHAR2(50 BYTE),
  CREATED_ON      TIMESTAMP(6),
  CREATED_TIME    VARCHAR2(15 BYTE),
  MODIFIED_BY     VARCHAR2(50 BYTE),
  MODIFIED_ON     TIMESTAMP(6),
  MODIFIED_TIME   VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.BANK_BRANCH_INFO_PK ON NAM_ERP_SOL.BANK_BRANCH_INFO
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."BANK_BRANCH_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.BANK_BRANCH_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN      
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.BANK_BRANCH_INFO ADD (
  CONSTRAINT BANK_BRANCH_INFO_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.BANK_BRANCH_INFO_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.BANK_BRANCH_INFO ADD (
  CONSTRAINT BANK_BRANCH_INFO_FK 
  FOREIGN KEY (BANK_ID) 
  REFERENCES NAM_ERP_SOL.BANK_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.COMPANY_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.COMPANY_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.COMPANY_INFO
(
  COMPANY_CODE          VARCHAR2(50 BYTE),
  OWN_CODE              VARCHAR2(50 BYTE)       NOT NULL,
  COM_NAME              VARCHAR2(200 BYTE)      NOT NULL,
  COM_ADDRESS           VARCHAR2(300 BYTE),
  COM_PHONE             VARCHAR2(50 BYTE),
  COM_REG_ID            VARCHAR2(50 BYTE),
  COM_TRADE_LICENSE_NO  VARCHAR2(50 BYTE),
  COM_OWNER_NAME        VARCHAR2(100 BYTE),
  COM_OWNER_CONTACT     VARCHAR2(50 BYTE),
  COM_EMAIL             VARCHAR2(100 BYTE),
  COM_COM_EST           NUMBER(4),
  COM_LOGO              BLOB,
  MIME_TYPE             VARCHAR2(225 BYTE),
  FILE_NAME             VARCHAR2(225 BYTE),
  CHARSET               VARCHAR2(50 BYTE),
  BLOB_UPDATE           DATE,
  COM_BRANCH_LIMIT      NUMBER(5),
  COM_USER_LIMIT        NUMBER(5),
  CREATED_BY            VARCHAR2(50 BYTE),
  CREATED_ON            TIMESTAMP(6),
  CREATED_TIME          VARCHAR2(15 BYTE),
  MODIFIED_BY           VARCHAR2(50 BYTE),
  MODIFIED_ON           TIMESTAMP(6),
  MODIFIED_TIME         VARCHAR2(15 BYTE),
  COMPANY_SHORT         VARCHAR2(10 BYTE)
)
LOB (COM_LOGO) STORE AS SECUREFILE (
  TABLESPACE  USERS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  NOCACHE
  LOGGING
      STORAGE    (
                  INITIAL          104K
                  NEXT             1M
                  MINEXTENTS       1
                  MAXEXTENTS       UNLIMITED
                  PCTINCREASE      0
                  BUFFER_POOL      DEFAULT
                 ))
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.COMPANY_INFO_PK ON NAM_ERP_SOL.COMPANY_INFO
(COMPANY_CODE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--  There is no statement for index NAM_ERP_SOL.SYS_C0012329.
--  The object is created when the parent object is created.

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."COMPANY_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.COMPANY_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.COMPANY_CODE IS NULL THEN  
        SELECT SUBSTR(REPLACE(UPPER(:NEW.COM_NAME),' ', ''),1,3)||'-'||TO_CHAR(SYSDATE,'DDMMYYYY')||'-'||(NVL(MAX(TO_NUMBER(SUBSTR(COMPANY_CODE,14))),0)+1)  
		INTO :NEW.COMPANY_CODE  
		FROM COMPANY_INFO;  
    END IF;  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.COMPANY_INFO ADD (
  CONSTRAINT COMPANY_INFO_PK
  PRIMARY KEY
  (COMPANY_CODE)
  USING INDEX NAM_ERP_SOL.COMPANY_INFO_PK
  ENABLE VALIDATE,
  UNIQUE (COM_EMAIL)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.COMPANY_BRANCH_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.COMPANY_BRANCH_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.COMPANY_BRANCH_INFO
(
  BRANCH_CODE     VARCHAR2(50 BYTE),
  COMPANY_CODE    VARCHAR2(50 BYTE),
  BRANCH_NAME     VARCHAR2(200 BYTE),
  BRANCH_ADDRESS  VARCHAR2(300 BYTE),
  BRANCH_PHONE    VARCHAR2(50 BYTE),
  CREATED_BY      VARCHAR2(50 BYTE),
  CREATED_ON      TIMESTAMP(6),
  CREATED_TIME    VARCHAR2(15 BYTE),
  MODIFIED_BY     VARCHAR2(50 BYTE),
  MODIFIED_ON     TIMESTAMP(6),
  MODIFIED_TIME   VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.COMPANY_BRANCH_INFO_PK ON NAM_ERP_SOL.COMPANY_BRANCH_INFO
(BRANCH_CODE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."COMPANY_BRANCH_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.COMPANY_BRANCH_INFO 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.BRANCH_CODE IS NULL THEN 
        SELECT LPAD(NVL(MAX(TO_NUMBER(BRANCH_CODE)),0)+1,5,'0') 
		INTO :NEW.BRANCH_CODE 
		FROM COMPANY_BRANCH_INFO; 
    END IF; 
    :NEW.CREATED_BY := V('APP_USER'); 
    :NEW.CREATED_ON := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY := V('APP_USER'); 
    :NEW.MODIFIED_ON := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/


ALTER TABLE NAM_ERP_SOL.COMPANY_BRANCH_INFO ADD (
  CONSTRAINT COMPANY_BRANCH_INFO_PK
  PRIMARY KEY
  (BRANCH_CODE)
  USING INDEX NAM_ERP_SOL.COMPANY_BRANCH_INFO_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.COMPANY_BRANCH_INFO ADD (
  CONSTRAINT COMPANY_BRANCH_INFO_FK 
  FOREIGN KEY (COMPANY_CODE) 
  REFERENCES NAM_ERP_SOL.COMPANY_INFO (COMPANY_CODE)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO
(
  ID               NUMBER,
  DEPARTMENT_NAME  VARCHAR2(200 BYTE),
  STATUS           VARCHAR2(1 BYTE)             DEFAULT 'Y',
  BRANCH_CODE      VARCHAR2(50 BYTE),
  COMPANY_CODE     VARCHAR2(50 BYTE),
  CREATED_BY       VARCHAR2(50 BYTE),
  CREATED_ON       TIMESTAMP(6),
  CREATED_TIME     VARCHAR2(15 BYTE),
  MODIFIED_BY      VARCHAR2(50 BYTE),
  MODIFIED_ON      TIMESTAMP(6),
  MODIFIED_TIME    VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO_CON ON NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO
(DEPARTMENT_NAME, COMPANY_CODE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE UNIQUE INDEX NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO_PK ON NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."COMPANY_DEPARTMENT_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM COMPANY_DEPARTMENT_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO ADD (
  CONSTRAINT COMPANY_DEPARTMENT_INFO_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO_PK
  ENABLE VALIDATE,
  CONSTRAINT COMPANY_DEPARTMENT_INFO_CON
  UNIQUE (DEPARTMENT_NAME, COMPANY_CODE)
  USING INDEX NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO_CON
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO ADD (
  CONSTRAINT COMPANY_DEPARTMENT_INFO_BR_FK 
  FOREIGN KEY (BRANCH_CODE) 
  REFERENCES NAM_ERP_SOL.COMPANY_BRANCH_INFO (BRANCH_CODE)
  ENABLE VALIDATE,
  CONSTRAINT COMPANY_DEPARTMENT_INFO_FK 
  FOREIGN KEY (COMPANY_CODE) 
  REFERENCES NAM_ERP_SOL.COMPANY_INFO (COMPANY_CODE)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.COMPANY_SECTION_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.COMPANY_SECTION_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.COMPANY_SECTION_INFO
(
  ID             NUMBER,
  DEPT_ID        NUMBER,
  SECTION_NAME   VARCHAR2(200 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.COMPANY_SECTION_INFO_CON ON NAM_ERP_SOL.COMPANY_SECTION_INFO
(SECTION_NAME, DEPT_ID, COMPANY_CODE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE UNIQUE INDEX NAM_ERP_SOL.COMPANY_SECTION_INFO_PK ON NAM_ERP_SOL.COMPANY_SECTION_INFO
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."COMPANY_SECTION_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.COMPANY_SECTION_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM COMPANY_SECTION_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.COMPANY_SECTION_INFO ADD (
  CONSTRAINT COMPANY_SECTION_INFO_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.COMPANY_SECTION_INFO_PK
  ENABLE VALIDATE,
  CONSTRAINT COMPANY_SECTION_INFO_CON
  UNIQUE (SECTION_NAME, DEPT_ID, COMPANY_CODE)
  USING INDEX NAM_ERP_SOL.COMPANY_SECTION_INFO_CON
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.COMPANY_SECTION_INFO ADD (
  CONSTRAINT COMPANY_SECTION_INFO_BR_FK 
  FOREIGN KEY (BRANCH_CODE) 
  REFERENCES NAM_ERP_SOL.COMPANY_BRANCH_INFO (BRANCH_CODE)
  ENABLE VALIDATE,
  CONSTRAINT COMPANY_SECTION_INFO_COM_FK 
  FOREIGN KEY (COMPANY_CODE) 
  REFERENCES NAM_ERP_SOL.COMPANY_INFO (COMPANY_CODE)
  ENABLE VALIDATE,
  CONSTRAINT COMPANY_SECTION_INFO_FK 
  FOREIGN KEY (DEPT_ID) 
  REFERENCES NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.USER_ROLES
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.USER_ROLES CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.USER_ROLES
(
  ID             NUMBER,
  ROLE_CODE      VARCHAR2(2 BYTE)               NOT NULL,
  ROLE_NAME      VARCHAR2(50 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  OWN_CODE       VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.USER_ROLES_PK ON NAM_ERP_SOL.USER_ROLES
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."USER_ROLES_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.USER_ROLES  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM USER_ROLES;  
    END IF;  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.USER_ROLES ADD (
  CONSTRAINT USER_ROLES_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.USER_ROLES_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.APP_USERS
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.APP_USERS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.APP_USERS
(
  ID             NUMBER,
  ROLE_ID        NUMBER,
  EMP_ID         NUMBER,
  USERNAME       VARCHAR2(50 BYTE),
  EMAIL          VARCHAR2(200 BYTE),
  PASSWORD       VARCHAR2(255 BYTE),
  MOBILE_NO      VARCHAR2(15 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  BRANCH_CODE    VARCHAR2(50 BYTE),
  USER_TYPE      VARCHAR2(2 BYTE)               DEFAULT 'U',
  OWN_CODE       VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'A',
  REGISTER_USER  NUMBER(1)                      DEFAULT 0
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.APP_USERS_PK ON NAM_ERP_SOL.APP_USERS
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--  There is no statement for index NAM_ERP_SOL.SYS_C0012338.
--  The object is created when the parent object is created.

--  There is no statement for index NAM_ERP_SOL.SYS_C0012339.
--  The object is created when the parent object is created.

--  There is no statement for index NAM_ERP_SOL.SYS_C0012340.
--  The object is created when the parent object is created.

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."APP_USERS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.APP_USERS 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM APP_USERS; 
    END IF;	 
	:NEW.PASSWORD := password_md5(:NEW.USERNAME, :NEW.PASSWORD); 
	IF :NEW.COMPANY_CODE IS NULL THEN 
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE'); 
	END IF; 
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE'); 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/


ALTER TABLE NAM_ERP_SOL.APP_USERS ADD (
  CONSTRAINT APP_USERS_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.APP_USERS_PK
  ENABLE VALIDATE,
  UNIQUE (USERNAME)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE,
  UNIQUE (EMAIL)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE,
  UNIQUE (MOBILE_NO)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.APP_USERS ADD (
  CONSTRAINT APP_USERS_FK 
  FOREIGN KEY (ROLE_ID) 
  REFERENCES NAM_ERP_SOL.USER_ROLES (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.MENU_PRIVILEGES
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.MENU_PRIVILEGES CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.MENU_PRIVILEGES
(
  ID             NUMBER,
  ROLE_ID        NUMBER,
  MENU_IDS       VARCHAR2(500 BYTE),
  OWN_CODE       VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.MENU_PRIVILEGES_PK ON NAM_ERP_SOL.MENU_PRIVILEGES
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--  There is no statement for index NAM_ERP_SOL.SYS_C0012342.
--  The object is created when the parent object is created.

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."MENU_PRIVILEGES_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MENU_PRIVILEGES  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MENU_PRIVILEGES;  
    END IF;	  
    :NEW.CREATED_BY   := V('APP_USER');  
    :NEW.CREATED_ON   := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY   := V('APP_USER');  
    :NEW.MODIFIED_ON   := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.MENU_PRIVILEGES ADD (
  CONSTRAINT MENU_PRIVILEGES_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.MENU_PRIVILEGES_PK
  ENABLE VALIDATE,
  UNIQUE (ROLE_ID)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.MENU_PRIVILEGES ADD (
  CONSTRAINT MENU_PRIVILEGES_FK 
  FOREIGN KEY (ROLE_ID) 
  REFERENCES NAM_ERP_SOL.USER_ROLES (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.MODULES
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.MODULES CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.MODULES
(
  ID                 NUMBER,
  OWN_CODE           VARCHAR2(50 BYTE),
  MODULE_NAME        VARCHAR2(100 BYTE),
  MODULE_DESC        VARCHAR2(100 BYTE),
  MODULE_IMAGE       BLOB,
  MIME_TYPE          VARCHAR2(255 BYTE),
  FILE_NAME          VARCHAR2(255 BYTE),
  CHAR_SET           VARCHAR2(255 BYTE),
  IMAGE_LAST_UPDATE  DATE,
  STATUS             VARCHAR2(1 BYTE)           DEFAULT 'Y',
  CREATED_BY         VARCHAR2(50 BYTE),
  CREATED_ON         TIMESTAMP(6),
  CREATED_TIME       VARCHAR2(15 BYTE),
  MODIFIED_BY        VARCHAR2(50 BYTE),
  MODIFIED_ON        TIMESTAMP(6),
  MODIFIED_TIME      VARCHAR2(15 BYTE),
  DASHBOARD_PAGENO   NUMBER
)
LOB (MODULE_IMAGE) STORE AS SECUREFILE (
  TABLESPACE  USERS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  NOCACHE
  LOGGING
      STORAGE    (
                  INITIAL          104K
                  NEXT             1M
                  MINEXTENTS       1
                  MAXEXTENTS       UNLIMITED
                  PCTINCREASE      0
                  BUFFER_POOL      DEFAULT
                 ))
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.MODULES_PK ON NAM_ERP_SOL.MODULES
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."MODULES_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MODULES 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MODULES; 
    END IF;	 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/


ALTER TABLE NAM_ERP_SOL.MODULES ADD (
  CONSTRAINT MODULES_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.MODULES_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.MODULE_MENU_PRIVILEGES
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.MODULE_MENU_PRIVILEGES CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.MODULE_MENU_PRIVILEGES
(
  ID             NUMBER,
  MODULE_ID      NUMBER,
  MAIN_MENU_ID   NUMBER,
  MENU_ID        NUMBER,
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.MODULE_MENU_PRIVILEGES_PK ON NAM_ERP_SOL.MODULE_MENU_PRIVILEGES
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."MODULE_MENU_PRIVILEGES_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MODULE_MENU_PRIVILEGES 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MODULE_MENU_PRIVILEGES; 
    END IF;	 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/


ALTER TABLE NAM_ERP_SOL.MODULE_MENU_PRIVILEGES ADD (
  CONSTRAINT MODULE_MENU_PRIVILEGES_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.MODULE_MENU_PRIVILEGES_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.MODULE_MENU_PRIVILEGES ADD (
  CONSTRAINT MODULE_MENU_PRIVILEGES_FK 
  FOREIGN KEY (MODULE_ID) 
  REFERENCES NAM_ERP_SOL.MODULES (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.MENUS
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.MENUS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.MENUS
(
  ID             NUMBER,
  OWN_CODE       VARCHAR2(50 BYTE),
  MENU_DESC      VARCHAR2(100 BYTE),
  PAGE_NO        NUMBER(15),
  PAR_MENU_ID    NUMBER,
  SEQ_NO         NUMBER,
  MENU_ICON      VARCHAR2(200 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  MENU_ACCESS    VARCHAR2(1 BYTE)               DEFAULT 'C',
  MENU_HOME      NUMBER(1)                      DEFAULT 0,
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.MENUS_PK ON NAM_ERP_SOL.MENUS
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.MENUS_TGR  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MENUS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MENUS;  
    END IF;
    IF :NEW.MENU_HOME IS NULL THEN
        :NEW.MENU_HOME := 0;
    END IF;	  
    :NEW.CREATED_BY   := V('APP_USER');  
    :NEW.CREATED_ON   := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN 
    IF :NEW.MENU_HOME IS NULL THEN
        :NEW.MENU_HOME := 0;
    END IF; 
    :NEW.MODIFIED_BY   := V('APP_USER');  
    :NEW.MODIFIED_ON   := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.MENUS ADD (
  CONSTRAINT MENUS_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.MENUS_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.MENUS ADD (
  CONSTRAINT MENUS_PAR_FK 
  FOREIGN KEY (PAR_MENU_ID) 
  REFERENCES NAM_ERP_SOL.MENUS (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.DEPT
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.DEPT CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.DEPT
(
  DEPTNO  NUMBER(2),
  DNAME   VARCHAR2(14 BYTE),
  LOC     VARCHAR2(13 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


--  There is no statement for index NAM_ERP_SOL.SYS_C0012346.
--  The object is created when the parent object is created.

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."DEPT_TRG1"  
              before insert ON NAM_ERP_SOL.DEPT  
              for each row
begin  
                  if :new.deptno is null then  
                      select dept_seq.nextval into :new.deptno from sys.dual;  
                 end if;  
              end;
/


ALTER TABLE NAM_ERP_SOL.DEPT ADD (
  PRIMARY KEY
  (DEPTNO)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP
(
  EMPNO     NUMBER(4)                           NOT NULL,
  ENAME     VARCHAR2(10 BYTE),
  JOB       VARCHAR2(9 BYTE),
  MGR       NUMBER(4),
  HIREDATE  DATE,
  SAL       NUMBER(7,2),
  COMM      NUMBER(7,2),
  DEPTNO    NUMBER(2)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


--  There is no statement for index NAM_ERP_SOL.SYS_C0012348.
--  The object is created when the parent object is created.

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.emp_tgr
before insert ON NAM_ERP_SOL.EMP
for each row
begin
if :NEW.EMPNO iS NUll then
:NEW.EMPNO := test_seq.nextval;
end if;
end;
/


CREATE OR REPLACE TRIGGER NAM_ERP_SOL."EMP_TRG1"  
              before insert ON NAM_ERP_SOL.EMP  
              for each row
begin  
                  if :new.empno is null then  
                      select emp_seq.nextval into :new.empno from sys.dual;  
                 end if;  
              end;
/


ALTER TABLE NAM_ERP_SOL.EMP ADD (
  PRIMARY KEY
  (EMPNO)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.EMP ADD (
  FOREIGN KEY (MGR) 
  REFERENCES NAM_ERP_SOL.EMP (EMPNO)
  ENABLE VALIDATE,
  FOREIGN KEY (DEPTNO) 
  REFERENCES NAM_ERP_SOL.DEPT (DEPTNO)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.INSTALLMENTS
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.INSTALLMENTS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.INSTALLMENTS
(
  ID                     NUMBER,
  CUSTOMER_ID            NUMBER,
  AGREEMENT_ID           NUMBER,
  MRID                   NUMBER(10),
  COMPOSITE_MR           VARCHAR2(15 BYTE),
  INSTALLMENT_AMOUNT     NUMBER,
  INSTALLMENT_DATE       DATE,
  PAYMENT_TYPE           CHAR(20 BYTE),
  ISACTIVE               NUMBER(38),
  CHEQUE_NO              CHAR(50 BYTE),
  CHEQUE_DATE            DATE,
  BANK_ID                NUMBER,
  BANK_BRANCH_ID         NUMBER,
  TRANSFER_FROM_CUST_ID  NUMBER,
  INS_TEMP               NUMBER,
  COMPANY_CODE           VARCHAR2(50 BYTE),
  BRANCH_CODE            VARCHAR2(50 BYTE),
  CREATED_BY             VARCHAR2(50 BYTE),
  CREATED_ON             TIMESTAMP(6),
  CREATED_TIME           VARCHAR2(15 BYTE),
  MODIFIED_BY            VARCHAR2(50 BYTE),
  MODIFIED_ON            TIMESTAMP(6),
  MODIFIED_TIME          VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.INSTALLMENTS_PK ON NAM_ERP_SOL.INSTALLMENTS
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."INSTALLMENTS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.INSTALLMENTS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM INSTALLMENTS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.INSTALLMENTS ADD (
  CONSTRAINT INSTALLMENTS_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.INSTALLMENTS_PK
  ENABLE VALIDATE);
DROP TABLE NAM_ERP_SOL.HTMLDB_PLAN_TABLE CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.HTMLDB_PLAN_TABLE
(
  STATEMENT_ID       VARCHAR2(30 BYTE),
  PLAN_ID            NUMBER,
  TIMESTAMP          DATE,
  REMARKS            VARCHAR2(4000 BYTE),
  OPERATION          VARCHAR2(30 BYTE),
  OPTIONS            VARCHAR2(255 BYTE),
  OBJECT_NODE        VARCHAR2(128 BYTE),
  OBJECT_OWNER       VARCHAR2(128 BYTE),
  OBJECT_NAME        VARCHAR2(128 BYTE),
  OBJECT_ALIAS       VARCHAR2(261 BYTE),
  OBJECT_INSTANCE    INTEGER,
  OBJECT_TYPE        VARCHAR2(128 BYTE),
  OPTIMIZER          VARCHAR2(255 BYTE),
  SEARCH_COLUMNS     NUMBER,
  ID                 INTEGER,
  PARENT_ID          INTEGER,
  DEPTH              INTEGER,
  POSITION           INTEGER,
  COST               INTEGER,
  CARDINALITY        INTEGER,
  BYTES              INTEGER,
  OTHER_TAG          VARCHAR2(255 BYTE),
  PARTITION_START    VARCHAR2(255 BYTE),
  PARTITION_STOP     VARCHAR2(255 BYTE),
  PARTITION_ID       INTEGER,
  OTHER              LONG,
  DISTRIBUTION       VARCHAR2(30 BYTE),
  CPU_COST           INTEGER,
  IO_COST            INTEGER,
  TEMP_SPACE         INTEGER,
  ACCESS_PREDICATES  VARCHAR2(4000 BYTE),
  FILTER_PREDICATES  VARCHAR2(4000 BYTE),
  PROJECTION         VARCHAR2(4000 BYTE),
  TIME               INTEGER,
  QBLOCK_NAME        VARCHAR2(128 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;
ALTER TABLE NAM_ERP_SOL.SOFTWARE_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.SOFTWARE_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.SOFTWARE_INFO
(
  OWN_CODE           VARCHAR2(50 BYTE),
  OWN_COM_NAME       VARCHAR2(200 BYTE),
  OWN_ADDRESS        VARCHAR2(300 BYTE),
  OWN_PHONE          VARCHAR2(50 BYTE),
  OWN_REG_ID         VARCHAR2(50 BYTE),
  OWN_TRADE_LICENSE  VARCHAR2(50 BYTE),
  OWN_CONTACT        VARCHAR2(50 BYTE),
  OWN_EMAIL          VARCHAR2(100 BYTE),
  OWN_EST            NUMBER(4),
  OWN_LOGO           BLOB,
  CREATED_BY         VARCHAR2(50 BYTE),
  CREATED_ON         TIMESTAMP(6),
  CREATED_TIME       VARCHAR2(15 BYTE),
  MODIFIED_BY        VARCHAR2(50 BYTE),
  MODIFIED_ON        TIMESTAMP(6),
  MODIFIED_TIME      VARCHAR2(15 BYTE),
  SOFTWARE_NAME      VARCHAR2(300 BYTE)
)
LOB (OWN_LOGO) STORE AS SECUREFILE (
  TABLESPACE  USERS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  NOCACHE
  LOGGING
      STORAGE    (
                  INITIAL          104K
                  NEXT             1M
                  MINEXTENTS       1
                  MAXEXTENTS       UNLIMITED
                  PCTINCREASE      0
                  BUFFER_POOL      DEFAULT
                 ))
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.SOFTWARE_INFO_INFO_PK ON NAM_ERP_SOL.SOFTWARE_INFO
(OWN_CODE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."SOFTWARE_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.SOFTWARE_INFO 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    :NEW.CREATED_BY := V('APP_USER'); 
    :NEW.CREATED_ON := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY := V('APP_USER'); 
    :NEW.MODIFIED_ON := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/


ALTER TABLE NAM_ERP_SOL.SOFTWARE_INFO ADD (
  CONSTRAINT SOFTWARE_INFO_INFO_PK
  PRIMARY KEY
  (OWN_CODE)
  USING INDEX NAM_ERP_SOL.SOFTWARE_INFO_INFO_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.THANA
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.THANA CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.THANA
(
  ID             NUMBER,
  DISTRICT_ID    NUMBER,
  THANA_NAME     VARCHAR2(100 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE),
  DIVISION_ID    NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.THANA_PK ON NAM_ERP_SOL.THANA
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."THANA_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.THANA  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM THANA;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.THANA ADD (
  CONSTRAINT THANA_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.THANA_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.CUSTOMERS
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.CUSTOMERS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.CUSTOMERS
(
  ID                    NUMBER,
  NAME                  VARCHAR2(200 BYTE),
  MOTHERS_NAME          VARCHAR2(120 BYTE),
  FATHER_NAME           VARCHAR2(120 BYTE),
  NATIONAL_ID_NO        VARCHAR2(100 BYTE),
  AGE                   NUMBER,
  BIRTH_CERTIFICATE_NO  VARCHAR2(100 BYTE),
  CARE_OF_NAME          VARCHAR2(150 BYTE),
  TRANSFER_TO_CUST_ID   NUMBER,
  BLOCK_NO              VARCHAR2(150 BYTE),
  CARE_OF_CATEGORY      VARCHAR2(100 BYTE),
  BRANCH_CODE           VARCHAR2(50 BYTE),
  COMPANY_CODE          VARCHAR2(50 BYTE),
  COMPOSITE_ID          VARCHAR2(100 BYTE),
  CUSTOMER_OLD_ID       VARCHAR2(100 BYTE),
  EMAIL                 VARCHAR2(150 BYTE),
  IMAGE                 BLOB,
  MIME_TYPE             VARCHAR2(50 BYTE),
  FILE_NAME             VARCHAR2(50 BYTE),
  CHARSET               VARCHAR2(50 BYTE),
  BLOB_UPDATE           TIMESTAMP(6),
  FILE_NO               VARCHAR2(150 BYTE),
  FILE_ATTACHMENT       BLOB,
  FILE_MIME_TYPE        VARCHAR2(50 BYTE),
  FILE_FILE_NAME        VARCHAR2(50 BYTE),
  FILE_CHARSET          VARCHAR2(50 BYTE),
  FILE_BLOB_UPDATE      TIMESTAMP(6),
  ISACTIVE              INTEGER,
  LAND_SIZE_ID          NUMBER,
  MOUZA_ID              NUMBER,
  NID                   VARCHAR2(100 BYTE),
  NOMINEE_1             VARCHAR2(500 BYTE),
  NOMINEE_1_RELATION    VARCHAR2(120 BYTE),
  NOMINEE_2             VARCHAR2(120 BYTE),
  NOMINEE_2_RELATION    VARCHAR2(120 BYTE),
  OLD_BOOK_ID           VARCHAR2(120 BYTE),
  PHONE_NO              VARCHAR2(250 BYTE),
  PLOT_NO               VARCHAR2(200 BYTE)      DEFAULT 1,
  PRESENT_ADDRESS       VARCHAR2(300 BYTE),
  REGI_DATE             DATE,
  REGI_NO               VARCHAR2(100 BYTE),
  REGI_PLOT_NO          VARCHAR2(300 BYTE),
  ROAD_NO               VARCHAR2(100 BYTE),
  RS_DAG                VARCHAR2(200 BYTE),
  SCHEME_ID             NUMBER,
  SECTOR_NO             VARCHAR2(100 BYTE),
  TOWN_ID               NUMBER,
  CREATED_BY            VARCHAR2(50 BYTE),
  CREATED_ON            TIMESTAMP(6),
  CREATED_TIME          VARCHAR2(15 BYTE),
  MODIFIED_BY           VARCHAR2(50 BYTE),
  MODIFIED_ON           TIMESTAMP(6),
  MODIFIED_TIME         VARCHAR2(15 BYTE)
)
LOB (IMAGE) STORE AS SECUREFILE (
  TABLESPACE  USERS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  NOCACHE
  LOGGING
      STORAGE    (
                  INITIAL          104K
                  NEXT             1M
                  MINEXTENTS       1
                  MAXEXTENTS       UNLIMITED
                  PCTINCREASE      0
                  BUFFER_POOL      DEFAULT
                 ))
LOB (FILE_ATTACHMENT) STORE AS SECUREFILE (
  TABLESPACE  USERS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  NOCACHE
  LOGGING
      STORAGE    (
                  INITIAL          104K
                  NEXT             1M
                  MINEXTENTS       1
                  MAXEXTENTS       UNLIMITED
                  PCTINCREASE      0
                  BUFFER_POOL      DEFAULT
                 ))
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.CUSTOMERS_PK ON NAM_ERP_SOL.CUSTOMERS
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--  There is no statement for index NAM_ERP_SOL.SYS_C0012353.
--  The object is created when the parent object is created.

--  There is no statement for index NAM_ERP_SOL.SYS_C0012354.
--  The object is created when the parent object is created.

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."CUSTOMERS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.CUSTOMERS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM CUSTOMERS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.CUSTOMERS ADD (
  CONSTRAINT CUSTOMERS_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.CUSTOMERS_PK
  ENABLE VALIDATE,
  UNIQUE (EMAIL)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE,
  UNIQUE (REGI_NO)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.DESIGNATION
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.DESIGNATION CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.DESIGNATION
(
  ID             NUMBER,
  DESIG_CODE     VARCHAR2(20 BYTE),
  DESIG_NAME     VARCHAR2(100 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE),
  DEPT_ID        NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.DESIGNATION_PK ON NAM_ERP_SOL.DESIGNATION
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."DESIGNATION_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.DESIGNATION  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM DESIGNATION;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.DESIGNATION ADD (
  CONSTRAINT DESIGNATION_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.DESIGNATION_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.LAND_SIZE_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.LAND_SIZE_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.LAND_SIZE_INFO
(
  ID             NUMBER,
  SIZE_NAME      VARCHAR2(100 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.LAND_SIZE_INFO_PK ON NAM_ERP_SOL.LAND_SIZE_INFO
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."LAND_SIZE_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.LAND_SIZE_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM LAND_SIZE_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.LAND_SIZE_INFO ADD (
  CONSTRAINT LAND_SIZE_INFO_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.LAND_SIZE_INFO_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.AGREEMENTS
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.AGREEMENTS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.AGREEMENTS
(
  ID                     NUMBER,
  CUSTOMER_ID            NUMBER,
  AGREEMENT_AMOUNT       NUMBER,
  AGREEMENT_DATE         DATE,
  ISACTIVE               INTEGER,
  INSTALLMENT_NO         NUMBER,
  DUE_FLAG               VARCHAR2(1 BYTE)       DEFAULT 'Y',
  PAID_AMT               NUMBER                 DEFAULT 0,
  PAID_DATE              DATE,
  TRANSFER_FROM_CUST_ID  NUMBER,
  COMPANY_CODE           VARCHAR2(50 BYTE),
  BRANCH_CODE            VARCHAR2(50 BYTE),
  CREATED_BY             VARCHAR2(50 BYTE),
  CREATED_ON             TIMESTAMP(6),
  CREATED_TIME           VARCHAR2(15 BYTE),
  MODIFIED_BY            VARCHAR2(50 BYTE),
  MODIFIED_ON            TIMESTAMP(6),
  MODIFIED_TIME          VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.AGREEMENTS_PK ON NAM_ERP_SOL.AGREEMENTS
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."AGREEMENTS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.AGREEMENTS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM AGREEMENTS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.AGREEMENTS ADD (
  CONSTRAINT AGREEMENTS_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.AGREEMENTS_PK
  ENABLE VALIDATE);
DROP TABLE NAM_ERP_SOL.MONEY_TRANSFERS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.MONEY_TRANSFERS
(
  FROM_CUSTOMER_ID  NUMBER,
  F_LPAID_INST_NO   NUMBER,
  TO_CUSTOMER_ID    NUMBER,
  TRANSFER_ID       NUMBER,
  TRANSFER_DATE     DATE,
  T_LPAID_INST_NO   NUMBER,
  REMARKS           VARCHAR2(1000 BYTE),
  COMPANY_CODE      VARCHAR2(50 BYTE),
  BRANCH_CODE       VARCHAR2(50 BYTE),
  CREATED_BY        VARCHAR2(50 BYTE),
  CREATED_ON        TIMESTAMP(6),
  CREATED_TIME      VARCHAR2(15 BYTE),
  MODIFIED_BY       VARCHAR2(50 BYTE),
  MODIFIED_ON       TIMESTAMP(6),
  MODIFIED_TIME     VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE OR REPLACE TRIGGER NAM_ERP_SOL."MONEY_TRANSFERS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MONEY_TRANSFERS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
ALTER TABLE NAM_ERP_SOL.UTILITY_HEAD
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.UTILITY_HEAD CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.UTILITY_HEAD
(
  ID             NUMBER,
  HEAD_NAME      VARCHAR2(200 BYTE),
  SHORT_NAME     VARCHAR2(200 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.UTILITY_HEAD_PK ON NAM_ERP_SOL.UTILITY_HEAD
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."UTILITY_HEAD_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.UTILITY_HEAD  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM UTILITY_HEAD;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.UTILITY_HEAD ADD (
  CONSTRAINT UTILITY_HEAD_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.UTILITY_HEAD_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.MONEY_RECEIPTS
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.MONEY_RECEIPTS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.MONEY_RECEIPTS
(
  ID                     NUMBER,
  RECEIVED_DATE          DATE,
  CUSTOMER_ID            NUMBER,
  RECEIVED_AMOUNT        NUMBER,
  RECEIVED_TYPE          VARCHAR2(300 BYTE),
  CHEQUE_NO              VARCHAR2(100 BYTE),
  BANK_ID                NUMBER,
  BRANCH_ID              NUMBER,
  CHEQUE_DATE            DATE,
  CHEQUE_DISHONOUR       NUMBER(1),
  REMARKS                VARCHAR2(100 BYTE),
  DISCOUNT_AMOUNT        NUMBER,
  SERVICE_CHARGE_AMOUNT  NUMBER,
  TRANSFER_FROM_CUST_ID  NUMBER,
  HIDE_FLAG              VARCHAR2(50 BYTE),
  COMPANY_CODE           VARCHAR2(50 BYTE),
  BRANCH_CODE            VARCHAR2(50 BYTE),
  CREATED_BY             VARCHAR2(50 BYTE),
  CREATED_ON             TIMESTAMP(6),
  CREATED_TIME           VARCHAR2(15 BYTE),
  MODIFIED_BY            VARCHAR2(50 BYTE),
  MODIFIED_ON            TIMESTAMP(6),
  MODIFIED_TIME          VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.MONEY_RECEIPTS_PK ON NAM_ERP_SOL.MONEY_RECEIPTS
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."MONEY_RECEIPTS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MONEY_RECEIPTS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MONEY_RECEIPTS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.MONEY_RECEIPTS ADD (
  CONSTRAINT MONEY_RECEIPTS_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.MONEY_RECEIPTS_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.TRANSACTIONS
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.TRANSACTIONS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.TRANSACTIONS
(
  ID                    NUMBER,
  CUSTOMER_ID           NUMBER,
  TOTAL_AMOUNT          NUMBER,
  BOOKING_AMOUNT        NUMBER,
  DISCNT                NUMBER,
  SDISCNT               NUMBER,
  BOOKING_DATE          DATE,
  TOTAL_INSTALLMENT_NO  NUMBER,
  ISACTIVE              NUMBER,
  BOOKING_FLAG          NUMBER(2)               DEFAULT 0                     NOT NULL,
  COMPANY_CODE          VARCHAR2(50 BYTE),
  BRANCH_CODE           VARCHAR2(50 BYTE),
  CREATED_BY            VARCHAR2(50 BYTE),
  CREATED_ON            TIMESTAMP(6),
  CREATED_TIME          VARCHAR2(15 BYTE),
  MODIFIED_BY           VARCHAR2(50 BYTE),
  MODIFIED_ON           TIMESTAMP(6),
  MODIFIED_TIME         VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.TRANSACTIONS_PK ON NAM_ERP_SOL.TRANSACTIONS
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."TRANSACTIONS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.TRANSACTIONS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM TRANSACTIONS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.TRANSACTIONS ADD (
  CONSTRAINT TRANSACTIONS_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.TRANSACTIONS_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.DISTRICT
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.DISTRICT CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.DISTRICT
(
  ID             NUMBER,
  DISTRICT_NAME  VARCHAR2(100 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE),
  DIVISION_ID    NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.DISTRICT_PK ON NAM_ERP_SOL.DISTRICT
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."DISTRICT_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.DISTRICT  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM DISTRICT;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.DISTRICT ADD (
  CONSTRAINT DISTRICT_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.DISTRICT_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.DIVISION
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.DIVISION CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.DIVISION
(
  ID             NUMBER,
  DIVISION_NAME  VARCHAR2(100 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.DIVISION_PK ON NAM_ERP_SOL.DIVISION
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."DIVISION_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.DIVISION 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM DIVISION; 
    END IF; 
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE'); 
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE'); 
    :NEW.CREATED_BY := V('APP_USER'); 
    :NEW.CREATED_ON := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY := V('APP_USER'); 
    :NEW.MODIFIED_ON := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/


ALTER TABLE NAM_ERP_SOL.DIVISION ADD (
  CONSTRAINT DIVISION_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.DIVISION_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.TOWN_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.TOWN_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.TOWN_INFO
(
  ID             NUMBER,
  TOWN_NAME      VARCHAR2(100 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.TOWN_INFO_PK ON NAM_ERP_SOL.TOWN_INFO
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."TOWN_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.TOWN_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM TOWN_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.TOWN_INFO ADD (
  CONSTRAINT TOWN_INFO_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.TOWN_INFO_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.USER_PRIVILEGES
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.USER_PRIVILEGES CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.USER_PRIVILEGES
(
  ID             NUMBER,
  USER_ID        NUMBER,
  MODULE_ID      NUMBER,
  MAIN_MENU_ID   NUMBER,
  MENU_ID        VARCHAR2(100 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE),
  REGISTER_USER  NUMBER(1)                      DEFAULT 0,
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.USER_PRIVILEGES_PK ON NAM_ERP_SOL.USER_PRIVILEGES
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE UNIQUE INDEX NAM_ERP_SOL.USER_PRIVILEGES_UQ ON NAM_ERP_SOL.USER_PRIVILEGES
(USER_ID, MODULE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."USER_PRIVILEGES_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.USER_PRIVILEGES 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM USER_PRIVILEGES; 
    END IF; 
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE'); 
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');	 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/


ALTER TABLE NAM_ERP_SOL.USER_PRIVILEGES ADD (
  CONSTRAINT USER_PRIVILEGES_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.USER_PRIVILEGES_PK
  ENABLE VALIDATE,
  CONSTRAINT USER_PRIVILEGES_UQ
  UNIQUE (USER_ID, MODULE_ID)
  USING INDEX NAM_ERP_SOL.USER_PRIVILEGES_UQ
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EDUCATION_LEVEL
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EDUCATION_LEVEL CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EDUCATION_LEVEL
(
  ID              NUMBER,
  EDUCATION_NAME  VARCHAR2(100 BYTE),
  STATUS          VARCHAR2(1 BYTE)              DEFAULT 'Y',
  BRANCH_CODE     VARCHAR2(50 BYTE),
  COMPANY_CODE    VARCHAR2(50 BYTE),
  CREATED_BY      VARCHAR2(50 BYTE),
  CREATED_ON      TIMESTAMP(6),
  CREATED_TIME    VARCHAR2(15 BYTE),
  MODIFIED_BY     VARCHAR2(50 BYTE),
  MODIFIED_ON     TIMESTAMP(6),
  MODIFIED_TIME   VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EDUCATION_LEVEL_PK ON NAM_ERP_SOL.EDUCATION_LEVEL
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."EDUCATION_LEVEL_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EDUCATION_LEVEL  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM EDUCATION_LEVEL;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.EDUCATION_LEVEL ADD (
  CONSTRAINT EDUCATION_LEVEL_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EDUCATION_LEVEL_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.SCHEME_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.SCHEME_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.SCHEME_INFO
(
  ID             NUMBER,
  SCHEME_NAME    VARCHAR2(100 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.SCHEME_INFO_PK ON NAM_ERP_SOL.SCHEME_INFO
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."SCHEME_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.SCHEME_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM SCHEME_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/


ALTER TABLE NAM_ERP_SOL.SCHEME_INFO ADD (
  CONSTRAINT SCHEME_INFO_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.SCHEME_INFO_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.RELIGION
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.RELIGION CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.RELIGION
(
  ID             NUMBER,
  RELIGION_NAME  VARCHAR2(100 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y',
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.RELIGION_PK ON NAM_ERP_SOL.RELIGION
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.Religion_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.RELIGION
FOR EACH ROW
BEGIN
IF INSERTING THEN
    IF :NEW.ID IS NULL THEN
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM Religion;
    END IF;
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.RELIGION ADD (
  CONSTRAINT RELIGION_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.RELIGION_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EDUCATIONAL_INSTITUTION
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EDUCATIONAL_INSTITUTION CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EDUCATIONAL_INSTITUTION
(
  ID                NUMBER,
  INSTITUTION_NAME  VARCHAR2(100 BYTE),
  ADDRESS           VARCHAR2(200 BYTE),
  PHONE             VARCHAR2(30 BYTE),
  EST               NUMBER(4),
  STATUS            VARCHAR2(1 BYTE)            DEFAULT 'Y',
  BRANCH_CODE       VARCHAR2(50 BYTE),
  COMPANY_CODE      VARCHAR2(50 BYTE),
  CREATED_BY        VARCHAR2(50 BYTE),
  CREATED_ON        TIMESTAMP(6),
  CREATED_TIME      VARCHAR2(15 BYTE),
  MODIFIED_BY       VARCHAR2(50 BYTE),
  MODIFIED_ON       TIMESTAMP(6),
  MODIFIED_TIME     VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EDUCATIONAL_INSTITUTION_PK ON NAM_ERP_SOL.EDUCATIONAL_INSTITUTION
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.Educational_institution_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EDUCATIONAL_INSTITUTION
FOR EACH ROW
BEGIN
IF INSERTING THEN
    IF :NEW.ID IS NULL THEN
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM Educational_institution;
    END IF;
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EDUCATIONAL_INSTITUTION ADD (
  CONSTRAINT EDUCATIONAL_INSTITUTION_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EDUCATIONAL_INSTITUTION_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.TAB1
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.TAB1 CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.TAB1
(
  ID    NUMBER Generated as Identity ( START WITH 21 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


--  There is no statement for index NAM_ERP_SOL.SYS_C0012404.
--  The object is created when the parent object is created.

ALTER TABLE NAM_ERP_SOL.TAB1 ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.SHIFT_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.SHIFT_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.SHIFT_INFO
(
  ID               NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  SHIFT_CODE       VARCHAR2(12 BYTE)            NOT NULL,
  SHIFT_NAME       VARCHAR2(100 BYTE),
  IN_TIME          NUMBER(8,2),
  OUT_TIME         NUMBER(8,2),
  GRACE_PERIOD     NUMBER(8,2),
  MEAL_TIME        NUMBER(8,2),
  IN_LIMIT_BEFORE  NUMBER(3),
  IN_LIMIT_AFTER   NUMBER(2),
  OT_LIMIT         NUMBER(2),
  SHIFT_IN_TIME    DATE,
  STATUS           VARCHAR2(1 BYTE)             DEFAULT 'Y',
  BRANCH_CODE      VARCHAR2(50 BYTE),
  COMPANY_CODE     VARCHAR2(50 BYTE),
  CREATED_BY       VARCHAR2(50 BYTE),
  CREATED_ON       TIMESTAMP(6),
  CREATED_TIME     VARCHAR2(15 BYTE),
  MODIFIED_BY      VARCHAR2(50 BYTE),
  MODIFIED_ON      TIMESTAMP(6),
  MODIFIED_TIME    VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.SHIFT_INFO_PK ON NAM_ERP_SOL.SHIFT_INFO
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.SHIFT_INFO_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.SHIFT_INFO
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.SHIFT_INFO ADD (
  CONSTRAINT SHIFT_INFO_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.SHIFT_INFO_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.SHIFT_CHANGE
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.SHIFT_CHANGE CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.SHIFT_CHANGE
(
  ID                 NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  SHIFT_CODE_FROM    VARCHAR2(20 BYTE),
  SHIFT_CODE_TO      VARCHAR2(20 BYTE),
  SHIFT_CHANGE_DATE  DATE,
  SHIFT_CHANGE_TIME  INTEGER,
  APPROVE_BY         NUMBER,
  APPROVE_DATE       DATE,
  STATUS_FLAG        VARCHAR2(1 BYTE)           DEFAULT 'I',
  STATUS             VARCHAR2(1 BYTE)           DEFAULT 'Y',
  BRANCH_CODE        VARCHAR2(50 BYTE),
  COMPANY_CODE       VARCHAR2(50 BYTE),
  CREATED_BY         VARCHAR2(50 BYTE),
  CREATED_ON         TIMESTAMP(6),
  CREATED_TIME       VARCHAR2(15 BYTE),
  MODIFIED_BY        VARCHAR2(50 BYTE),
  MODIFIED_ON        TIMESTAMP(6),
  MODIFIED_TIME      VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.SHIFT_CHANGE_PK ON NAM_ERP_SOL.SHIFT_CHANGE
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.SHIFT_CHANGE_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.SHIFT_CHANGE
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.SHIFT_CHANGE ADD (
  CONSTRAINT SHIFT_CHANGE_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.SHIFT_CHANGE_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP_INFO
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP_INFO CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP_INFO
(
  ID                           NUMBER,
  PIN                          VARCHAR2(100 BYTE),
  CARD_NO                      VARCHAR2(30 BYTE),
  NATIONAL_ID                  VARCHAR2(100 BYTE),
  FIRST_NAME                   VARCHAR2(250 BYTE),
  MIDDLE_NAME                  VARCHAR2(120 BYTE),
  LAST_NAME                    VARCHAR2(120 BYTE),
  NATIVE_NAME                  VARCHAR2(200 BYTE),
  DOB                          DATE,
  POB                          VARCHAR2(100 BYTE),
  SEX                          VARCHAR2(10 BYTE),
  MARITAL_STATUS               VARCHAR2(10 BYTE),
  ID_MARK                      VARCHAR2(50 BYTE),
  BLOOD_GROUP                  VARCHAR2(15 BYTE),
  PASSPORT_NO                  VARCHAR2(30 BYTE),
  PASS_PLACE_OF_ISSUE          VARCHAR2(50 BYTE),
  PASS_VALID_TILL              DATE,
  RELIGION_ID                  NUMBER,
  NATIONALITY_NAME             VARCHAR2(100 BYTE),
  STATUS                       VARCHAR2(15 BYTE),
  FATHER_NAME                  VARCHAR2(100 BYTE),
  MOTHER_NAME                  VARCHAR2(100 BYTE),
  HUSBAND_NAME                 VARCHAR2(100 BYTE),
  BEHAVIOR                     VARCHAR2(200 BYTE),
  FILE_NAME                    VARCHAR2(225 BYTE),
  EMAIL                        VARCHAR2(100 BYTE),
  SIGN_FILE_NAME               VARCHAR2(225 BYTE),
  HEIGHT                       VARCHAR2(10 BYTE),
  DEPT_ID                      NUMBER,
  SECTION_ID                   NUMBER,
  DESIG_ID                     NUMBER,
  OFFICE_LOCATION              VARCHAR2(200 BYTE),
  EMP_TYPE                     VARCHAR2(20 BYTE),
  GRADE_ID                     NUMBER,
  JOINING_DATE                 DATE,
  CONFIRM_DATE                 DATE,
  INACTIVE_DATE                DATE,
  M_FLAG                       CHAR(1 BYTE),
  PROVISION_PERIOD             VARCHAR2(10 BYTE),
  BASIC_SAL                    NUMBER(10,2),
  HOUSE_RENT                   NUMBER(10,2),
  MEDICAL                      NUMBER(10,2),
  SPECIAL_ALLOW                NUMBER(10,2),
  CONV_ALLOW                   NUMBER(10,2),
  FOOD_ALLOW                   NUMBER(10,2),
  MOB_BILL                     NUMBER(10,2),
  HOLIDAY_ALLOW                NUMBER(10,2),
  OTHERS_ALLOW                 NUMBER(10,2),
  NIGHT_RATE                   NUMBER(10,2),
  WORK_ENT                     VARCHAR2(10 BYTE),
  OT_ENT                       CHAR(1 BYTE)     DEFAULT 'N',
  TRAN_FUEL                    NUMBER(10,2),
  TRANSPORT_ENT                VARCHAR2(4 BYTE),
  WELFARE_CONTRIBUTION         NUMBER(10,2),
  DORMATORY_CHG                NUMBER(10,2),
  HOUSE_RENT_DEDUCT            NUMBER(10,2),
  TAX_ENT                      VARCHAR2(4 BYTE),
  TAX_DEDUCT                   NUMBER(10,2),
  PF                           CHAR(1 BYTE),
  PROVID_FUND                  CHAR(1 BYTE),
  RES_ENT                      VARCHAR2(4 BYTE),
  WEEKLY_OFF_NUM               NUMBER(1),
  WEEKLY_OFF_1                 VARCHAR2(15 BYTE),
  WEEKLY_OFF_2                 VARCHAR2(15 BYTE),
  WEEKLY_OFF_3                 VARCHAR2(100 BYTE),
  SAL_HOLDER                   CHAR(1 BYTE)     DEFAULT 'Y',
  BANK_ACC_NO                  VARCHAR2(20 BYTE),
  TIN_NO                       VARCHAR2(30 BYTE),
  CAL_CODE                     VARCHAR2(20 BYTE),
  SHIFT_ID                     NUMBER,
  SHIFT_ROSTERING              CHAR(1 BYTE)     DEFAULT 'N',
  LAST_SHIFT_CHANGE_ID         NUMBER,
  LAST_SHIFT_ROSTER_DATE       DATE,
  LAST_SHIFT_ROSTER_DIRECTION  CHAR(1 BYTE),
  FLOOR_ID                     VARCHAR2(10 BYTE),
  RESIGN_DATE                  DATE,
  CAUSES_OF_RESIGN             VARCHAR2(150 BYTE),
  WORKING_FLAG                 VARCHAR2(30 BYTE) DEFAULT 'F',
  COMPLIANCE_EMP_TYPE          VARCHAR2(10 BYTE) DEFAULT 'FS',
  RELEASE_DATE                 DATE,
  REASON                       VARCHAR2(200 BYTE),
  ROSTER_ALLOW                 NUMBER(6),
  OFFICER_FLAG                 NUMBER,
  EFFECTIVE_DATE               DATE,
  INCENTIVE                    NUMBER(8),
  SAL_CAL_METHOD               VARCHAR2(2 BYTE) DEFAULT 'R',
  MOBILE_BANKING_NO            VARCHAR2(14 BYTE),
  EMP_LEVEL                    VARCHAR2(2 BYTE),
  BRANCH_CODE                  VARCHAR2(50 BYTE),
  COMPANY_CODE                 VARCHAR2(50 BYTE),
  CREATED_BY                   VARCHAR2(50 BYTE),
  CREATED_ON                   TIMESTAMP(6),
  CREATED_TIME                 VARCHAR2(15 BYTE),
  MODIFIED_BY                  VARCHAR2(50 BYTE),
  MODIFIED_ON                  TIMESTAMP(6),
  MODIFIED_TIME                VARCHAR2(15 BYTE),
  PHOTO_PATH                   VARCHAR2(255 BYTE),
  EMP_SIGN_PATH                VARCHAR2(255 BYTE),
  SAL_SECTOR                   NUMBER,
  EMP_CATEGORY                 VARCHAR2(1 BYTE),
  REF_EMP                      NUMBER,
  TEMP                         NUMBER(1)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EMP_PERSONAL_PK ON NAM_ERP_SOL.EMP_INFO
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_INFO_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_INFO
FOR EACH ROW
BEGIN
IF INSERTING THEN
    IF :NEW.M_FLAG IS NULL THEN
        :NEW.M_FLAG := 'A';
    END IF;
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EMP_INFO ADD (
  CONSTRAINT EMP_PERSONAL_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EMP_PERSONAL_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP_ADDRESS
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP_ADDRESS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP_ADDRESS
(
  ID               NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  EMP_ID           NUMBER,
  PER_CARE_OFF     VARCHAR2(40 BYTE),
  PER_HOUSE_NO     VARCHAR2(40 BYTE),
  PER_ROAD_NO      VARCHAR2(40 BYTE),
  PER_BLOCK_NO     VARCHAR2(40 BYTE),
  PER_CITY_VILL    VARCHAR2(40 BYTE),
  PER_THANA_ID     NUMBER,
  PER_DISTRICT_ID  NUMBER,
  PER_DIVISION_ID  NUMBER,
  PER_POST_CODE    VARCHAR2(40 BYTE),
  PER_POST_NAME    VARCHAR2(150 BYTE),
  PER_PHONE        VARCHAR2(30 BYTE),
  PER_MOBILE       VARCHAR2(40 BYTE),
  PER_FAX          VARCHAR2(30 BYTE),
  PRE_CARE_OFF     VARCHAR2(40 BYTE),
  PRE_HOUSE_NO     VARCHAR2(40 BYTE),
  PRE_ROAD_NO      VARCHAR2(40 BYTE),
  PRE_BLOCK_NO     VARCHAR2(40 BYTE),
  PRE_CITY_VILL    VARCHAR2(40 BYTE),
  PRE_THANA_ID     NUMBER,
  PRE_DISTRICT_ID  NUMBER,
  PRE_DIVISION_ID  NUMBER,
  PRE_POST_CODE    VARCHAR2(40 BYTE),
  PRE_PHONE        VARCHAR2(30 BYTE),
  PRE_MOBILE       VARCHAR2(40 BYTE),
  PRE_FAX          VARCHAR2(30 BYTE),
  PRE_POST_NAME    VARCHAR2(150 BYTE),
  BRANCH_CODE      VARCHAR2(50 BYTE),
  COMPANY_CODE     VARCHAR2(50 BYTE),
  CREATED_BY       VARCHAR2(50 BYTE),
  CREATED_ON       TIMESTAMP(6),
  CREATED_TIME     VARCHAR2(15 BYTE),
  MODIFIED_BY      VARCHAR2(50 BYTE),
  MODIFIED_ON      TIMESTAMP(6),
  MODIFIED_TIME    VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EMP_ADDRESS_PK ON NAM_ERP_SOL.EMP_ADDRESS
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_ADDRESS_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_ADDRESS
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EMP_ADDRESS ADD (
  CONSTRAINT EMP_ADDRESS_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EMP_ADDRESS_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.EMP_ADDRESS ADD (
  CONSTRAINT EMP_ADDRESS_FK 
  FOREIGN KEY (EMP_ID) 
  REFERENCES NAM_ERP_SOL.EMP_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP_WORK_EXP
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP_WORK_EXP CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP_WORK_EXP
(
  ID              NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  EMP_ID          NUMBER,
  ORG_NAME        VARCHAR2(50 BYTE),
  DESIGNATION     VARCHAR2(30 BYTE),
  D_FROM          DATE,
  D_TO            DATE,
  LEAVE_REASON    VARCHAR2(50 BYTE),
  ORG_ADDRESS     VARCHAR2(20 BYTE),
  ORG_TEL         VARCHAR2(10 BYTE),
  LAST_SAL_DRAWN  NUMBER,
  BRANCH_CODE     VARCHAR2(50 BYTE),
  COMPANY_CODE    VARCHAR2(50 BYTE),
  CREATED_BY      VARCHAR2(50 BYTE),
  CREATED_ON      TIMESTAMP(6),
  CREATED_TIME    VARCHAR2(15 BYTE),
  MODIFIED_BY     VARCHAR2(50 BYTE),
  MODIFIED_ON     TIMESTAMP(6),
  MODIFIED_TIME   VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EMP_WORK_EXP_PK ON NAM_ERP_SOL.EMP_WORK_EXP
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_WORK_EXP_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_WORK_EXP
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EMP_WORK_EXP ADD (
  CONSTRAINT EMP_WORK_EXP_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EMP_WORK_EXP_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.EMP_WORK_EXP ADD (
  CONSTRAINT EMP_WORK_EXP_FK 
  FOREIGN KEY (EMP_ID) 
  REFERENCES NAM_ERP_SOL.EMP_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP_EDUCATION
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP_EDUCATION CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP_EDUCATION
(
  ID              NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  EMP_ID          NUMBER,
  NAME_OF_INST    VARCHAR2(100 BYTE),
  PASSED_EXAM     VARCHAR2(50 BYTE),
  SUBJECT         VARCHAR2(50 BYTE),
  DIVISION_GRADE  VARCHAR2(30 BYTE),
  YEAR            VARCHAR2(5 BYTE),
  BOARD           VARCHAR2(100 BYTE),
  MARKS           NUMBER(4),
  BRANCH_CODE     VARCHAR2(50 BYTE),
  COMPANY_CODE    VARCHAR2(50 BYTE),
  CREATED_BY      VARCHAR2(50 BYTE),
  CREATED_ON      TIMESTAMP(6),
  CREATED_TIME    VARCHAR2(15 BYTE),
  MODIFIED_BY     VARCHAR2(50 BYTE),
  MODIFIED_ON     TIMESTAMP(6),
  MODIFIED_TIME   VARCHAR2(15 BYTE),
  EXAM_ID         NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EMP_EDUCATION_PK ON NAM_ERP_SOL.EMP_EDUCATION
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_EDUCATION_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_EDUCATION
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EMP_EDUCATION ADD (
  CONSTRAINT EMP_EDUCATION_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EMP_EDUCATION_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.EMP_EDUCATION ADD (
  CONSTRAINT EMP_EDUCATION_FK 
  FOREIGN KEY (EMP_ID) 
  REFERENCES NAM_ERP_SOL.EMP_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP_SHORT_COURSE
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP_SHORT_COURSE CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP_SHORT_COURSE
(
  ID             NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  EMP_ID         NUMBER,
  COURSE_NAME    VARCHAR2(100 BYTE),
  INSTITUTE      VARCHAR2(100 BYTE),
  C_FROM         DATE,
  C_TO           DATE,
  CERT_NAME      VARCHAR2(100 BYTE),
  REMARKS        VARCHAR2(100 BYTE),
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EMP_SHORT_COURSE_PK ON NAM_ERP_SOL.EMP_SHORT_COURSE
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_SHORT_COURSE_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_SHORT_COURSE
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EMP_SHORT_COURSE ADD (
  CONSTRAINT EMP_SHORT_COURSE_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EMP_SHORT_COURSE_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.EMP_SHORT_COURSE ADD (
  CONSTRAINT EMP_SHORT_COURSE_FK 
  FOREIGN KEY (EMP_ID) 
  REFERENCES NAM_ERP_SOL.EMP_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP_TRAINING
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP_TRAINING CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP_TRAINING
(
  ID             NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  EMP_ID         NUMBER,
  T_TITLE        VARCHAR2(100 BYTE),
  T_INSTITUTE    VARCHAR2(100 BYTE),
  T_FROM         DATE,
  T_TO           DATE,
  T_CERTIFICATE  VARCHAR2(100 BYTE),
  REMARKS        VARCHAR2(30 BYTE),
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EMP_TRAINING_PK ON NAM_ERP_SOL.EMP_TRAINING
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_TRAINING_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_TRAINING
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EMP_TRAINING ADD (
  CONSTRAINT EMP_TRAINING_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EMP_TRAINING_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.EMP_TRAINING ADD (
  CONSTRAINT EMP_TRAINING_FK 
  FOREIGN KEY (EMP_ID) 
  REFERENCES NAM_ERP_SOL.EMP_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP_FAMILY
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP_FAMILY CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP_FAMILY
(
  ID               NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  EMP_ID           NUMBER,
  DEPENDANCY_NO    NUMBER(2),
  DEPENDANCY_NAME  VARCHAR2(100 BYTE),
  RELATIONSHIP     VARCHAR2(40 BYTE),
  D_DOB            DATE,
  D_AGE            NUMBER(4),
  D_SEX            VARCHAR2(7 BYTE),
  BRANCH_CODE      VARCHAR2(50 BYTE),
  COMPANY_CODE     VARCHAR2(50 BYTE),
  CREATED_BY       VARCHAR2(50 BYTE),
  CREATED_ON       TIMESTAMP(6),
  CREATED_TIME     VARCHAR2(15 BYTE),
  MODIFIED_BY      VARCHAR2(50 BYTE),
  MODIFIED_ON      TIMESTAMP(6),
  MODIFIED_TIME    VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EMP_FAMILY_PK ON NAM_ERP_SOL.EMP_FAMILY
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_FAMILY_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_FAMILY
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EMP_FAMILY ADD (
  CONSTRAINT EMP_FAMILY_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EMP_FAMILY_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.EMP_FAMILY ADD (
  CONSTRAINT EMP_FAMILY_FK 
  FOREIGN KEY (EMP_ID) 
  REFERENCES NAM_ERP_SOL.EMP_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP_LANGUAGE
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP_LANGUAGE CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP_LANGUAGE
(
  ID             NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  EMP_ID         NUMBER,
  LANGUAGE_ID    NUMBER,
  L_SPEAK        VARCHAR2(40 BYTE),
  L_READ         VARCHAR2(40 BYTE),
  L_WRITE        VARCHAR2(40 BYTE),
  L_UNDERSTAND   VARCHAR2(40 BYTE),
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EMP_LANGUAGE_PK ON NAM_ERP_SOL.EMP_LANGUAGE
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_LANGUAGE_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_LANGUAGE
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EMP_LANGUAGE ADD (
  CONSTRAINT EMP_LANGUAGE_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EMP_LANGUAGE_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.EMP_LANGUAGE ADD (
  CONSTRAINT EMP_LANGUAGE_FK 
  FOREIGN KEY (EMP_ID) 
  REFERENCES NAM_ERP_SOL.EMP_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP_IT_LITERACY
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP_IT_LITERACY CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP_IT_LITERACY
(
  ID                  NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  EMP_ID              NUMBER,
  PROG_ID             NUMBER,
  EXCELENT            VARCHAR2(5 BYTE),
  GOOD                VARCHAR2(5 BYTE),
  FAIR                VARCHAR2(5 BYTE),
  KNOW_LITTLE         VARCHAR2(5 BYTE),
  DO_NOT_KNOW_AT_ALL  VARCHAR2(5 BYTE),
  BRANCH_CODE         VARCHAR2(50 BYTE),
  COMPANY_CODE        VARCHAR2(50 BYTE),
  CREATED_BY          VARCHAR2(50 BYTE),
  CREATED_ON          TIMESTAMP(6),
  CREATED_TIME        VARCHAR2(15 BYTE),
  MODIFIED_BY         VARCHAR2(50 BYTE),
  MODIFIED_ON         TIMESTAMP(6),
  MODIFIED_TIME       VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EMP_IT_LITERACY_PK ON NAM_ERP_SOL.EMP_IT_LITERACY
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_IT_LITERACY_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_IT_LITERACY
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EMP_IT_LITERACY ADD (
  CONSTRAINT EMP_IT_LITERACY_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EMP_IT_LITERACY_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.EMP_IT_LITERACY ADD (
  CONSTRAINT EMP_IT_LITERACY_FK 
  FOREIGN KEY (EMP_ID) 
  REFERENCES NAM_ERP_SOL.EMP_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMP_REFERENCE
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMP_REFERENCE CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMP_REFERENCE
(
  ID             NUMBER Generated as Identity ( START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  EMP_ID         NUMBER,
  SL_NO          NUMBER(2),
  NAME           VARCHAR2(100 BYTE),
  RELATION       VARCHAR2(100 BYTE),
  ORG_NAME       VARCHAR2(100 BYTE),
  DESIGNATION    VARCHAR2(100 BYTE),
  REF_TYPE       VARCHAR2(30 BYTE),
  ADDRESS        VARCHAR2(300 BYTE),
  CONTACT_NO     VARCHAR2(30 BYTE),
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.EMP_REFERENCE_PK ON NAM_ERP_SOL.EMP_REFERENCE
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_REFERENCE_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_REFERENCE
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.EMP_REFERENCE ADD (
  CONSTRAINT EMP_REFERENCE_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.EMP_REFERENCE_PK
  ENABLE VALIDATE);

ALTER TABLE NAM_ERP_SOL.EMP_REFERENCE ADD (
  CONSTRAINT EMP_REFERENCE_FK 
  FOREIGN KEY (EMP_ID) 
  REFERENCES NAM_ERP_SOL.EMP_INFO (ID)
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.EMPLOYEE_INFORMATION_IMAGE
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.EMPLOYEE_INFORMATION_IMAGE CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.EMPLOYEE_INFORMATION_IMAGE
(
  EMPLOYEE_ID    NUMBER Generated as Identity ( START WITH 21 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  EMPLOYEE_NAME  VARCHAR2(100 BYTE),
  DESIGNATION    VARCHAR2(100 BYTE),
  JOINING_DATE   DATE,
  FATHERS_NAME   VARCHAR2(200 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


--  There is no statement for index NAM_ERP_SOL.SYS_C0012660.
--  The object is created when the parent object is created.

ALTER TABLE NAM_ERP_SOL.EMPLOYEE_INFORMATION_IMAGE ADD (
  PRIMARY KEY
  (EMPLOYEE_ID)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MAXSIZE          UNLIMITED
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.SALARY_SECTORS
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.SALARY_SECTORS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.SALARY_SECTORS
(
  ID             NUMBER Generated as Identity ( START WITH 21 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  SECTOR_NAME    VARCHAR2(100 BYTE),
  SECTOR_DESC    VARCHAR2(300 BYTE),
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE),
  STATUS         VARCHAR2(1 BYTE)               DEFAULT 'Y'
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.SALARY_SECTORS_PK ON NAM_ERP_SOL.SALARY_SECTORS
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.SALARY_SECTORS_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.SALARY_SECTORS
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.SALARY_SECTORS ADD (
  CONSTRAINT SALARY_SECTORS_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.SALARY_SECTORS_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.LANGUAGES
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.LANGUAGES CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.LANGUAGES
(
  ID             NUMBER Generated as Identity ( START WITH 21 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  LANGUAGE_NAME  VARCHAR2(100 BYTE),
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.LANGUAGES_PK ON NAM_ERP_SOL.LANGUAGES
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.LANGUAGES_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.LANGUAGES
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.LANGUAGES ADD (
  CONSTRAINT LANGUAGES_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.LANGUAGES_PK
  ENABLE VALIDATE);
ALTER TABLE NAM_ERP_SOL.COMPUTER_PROGRAMS
 DROP PRIMARY KEY CASCADE;

DROP TABLE NAM_ERP_SOL.COMPUTER_PROGRAMS CASCADE CONSTRAINTS;

CREATE TABLE NAM_ERP_SOL.COMPUTER_PROGRAMS
(
  ID             NUMBER Generated as Identity ( START WITH 21 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP) NOT NULL,
  PROGRAM_NAME   VARCHAR2(100 BYTE),
  BRANCH_CODE    VARCHAR2(50 BYTE),
  COMPANY_CODE   VARCHAR2(50 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  CREATED_ON     TIMESTAMP(6),
  CREATED_TIME   VARCHAR2(15 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  MODIFIED_ON    TIMESTAMP(6),
  MODIFIED_TIME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX NAM_ERP_SOL.COMPUTER_PROGRAMS_PK ON NAM_ERP_SOL.COMPUTER_PROGRAMS
(ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.COMPUTER_PROGRAMS_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.COMPUTER_PROGRAMS
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/


ALTER TABLE NAM_ERP_SOL.COMPUTER_PROGRAMS ADD (
  CONSTRAINT COMPUTER_PROGRAMS_PK
  PRIMARY KEY
  (ID)
  USING INDEX NAM_ERP_SOL.COMPUTER_PROGRAMS_PK
  ENABLE VALIDATE);
DROP TRIGGER NAM_ERP_SOL.AGREEMENTS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."AGREEMENTS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.AGREEMENTS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM AGREEMENTS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.APP_USERS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."APP_USERS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.APP_USERS 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM APP_USERS; 
    END IF;	 
	:NEW.PASSWORD := password_md5(:NEW.USERNAME, :NEW.PASSWORD); 
	IF :NEW.COMPANY_CODE IS NULL THEN 
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE'); 
	END IF; 
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE'); 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/
DROP TRIGGER NAM_ERP_SOL.BANK_BRANCH_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."BANK_BRANCH_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.BANK_BRANCH_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN      
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.BANK_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."BANK_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.BANK_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.COMPANY_BRANCH_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."COMPANY_BRANCH_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.COMPANY_BRANCH_INFO 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.BRANCH_CODE IS NULL THEN 
        SELECT LPAD(NVL(MAX(TO_NUMBER(BRANCH_CODE)),0)+1,5,'0') 
		INTO :NEW.BRANCH_CODE 
		FROM COMPANY_BRANCH_INFO; 
    END IF; 
    :NEW.CREATED_BY := V('APP_USER'); 
    :NEW.CREATED_ON := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY := V('APP_USER'); 
    :NEW.MODIFIED_ON := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/
DROP TRIGGER NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."COMPANY_DEPARTMENT_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.COMPANY_DEPARTMENT_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM COMPANY_DEPARTMENT_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.COMPANY_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."COMPANY_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.COMPANY_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.COMPANY_CODE IS NULL THEN  
        SELECT SUBSTR(REPLACE(UPPER(:NEW.COM_NAME),' ', ''),1,3)||'-'||TO_CHAR(SYSDATE,'DDMMYYYY')||'-'||(NVL(MAX(TO_NUMBER(SUBSTR(COMPANY_CODE,14))),0)+1)  
		INTO :NEW.COMPANY_CODE  
		FROM COMPANY_INFO;  
    END IF;  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.COMPANY_SECTION_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."COMPANY_SECTION_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.COMPANY_SECTION_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM COMPANY_SECTION_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.CUSTOMERS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."CUSTOMERS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.CUSTOMERS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM CUSTOMERS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.DEPT_TRG1;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."DEPT_TRG1"  
              before insert ON NAM_ERP_SOL.DEPT  
              for each row
begin  
                  if :new.deptno is null then  
                      select dept_seq.nextval into :new.deptno from sys.dual;  
                 end if;  
              end;
/
DROP TRIGGER NAM_ERP_SOL.DESIGNATION_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."DESIGNATION_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.DESIGNATION  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM DESIGNATION;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.DISTRICT_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."DISTRICT_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.DISTRICT  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM DISTRICT;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.DIVISION_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."DIVISION_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.DIVISION 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM DIVISION; 
    END IF; 
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE'); 
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE'); 
    :NEW.CREATED_BY := V('APP_USER'); 
    :NEW.CREATED_ON := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY := V('APP_USER'); 
    :NEW.MODIFIED_ON := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/
DROP TRIGGER NAM_ERP_SOL.EDUCATION_LEVEL_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."EDUCATION_LEVEL_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EDUCATION_LEVEL  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM EDUCATION_LEVEL;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_TRG1;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."EMP_TRG1"  
              before insert ON NAM_ERP_SOL.EMP  
              for each row
begin  
                  if :new.empno is null then  
                      select emp_seq.nextval into :new.empno from sys.dual;  
                 end if;  
              end;
/
DROP TRIGGER NAM_ERP_SOL.INSTALLMENTS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."INSTALLMENTS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.INSTALLMENTS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM INSTALLMENTS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.LAND_SIZE_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."LAND_SIZE_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.LAND_SIZE_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM LAND_SIZE_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.MENUS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.MENUS_TGR  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MENUS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MENUS;  
    END IF;
    IF :NEW.MENU_HOME IS NULL THEN
        :NEW.MENU_HOME := 0;
    END IF;	  
    :NEW.CREATED_BY   := V('APP_USER');  
    :NEW.CREATED_ON   := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN 
    IF :NEW.MENU_HOME IS NULL THEN
        :NEW.MENU_HOME := 0;
    END IF; 
    :NEW.MODIFIED_BY   := V('APP_USER');  
    :NEW.MODIFIED_ON   := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.MENU_PRIVILEGES_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."MENU_PRIVILEGES_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MENU_PRIVILEGES  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MENU_PRIVILEGES;  
    END IF;	  
    :NEW.CREATED_BY   := V('APP_USER');  
    :NEW.CREATED_ON   := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY   := V('APP_USER');  
    :NEW.MODIFIED_ON   := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.MODULES_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."MODULES_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MODULES 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MODULES; 
    END IF;	 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/
DROP TRIGGER NAM_ERP_SOL.MODULE_MENU_PRIVILEGES_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."MODULE_MENU_PRIVILEGES_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MODULE_MENU_PRIVILEGES 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MODULE_MENU_PRIVILEGES; 
    END IF;	 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/
DROP TRIGGER NAM_ERP_SOL.MONEY_RECEIPTS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."MONEY_RECEIPTS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MONEY_RECEIPTS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MONEY_RECEIPTS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.MONEY_TRANSFERS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."MONEY_TRANSFERS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.MONEY_TRANSFERS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.SCHEME_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."SCHEME_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.SCHEME_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM SCHEME_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.SOFTWARE_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."SOFTWARE_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.SOFTWARE_INFO 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    :NEW.CREATED_BY := V('APP_USER'); 
    :NEW.CREATED_ON := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY := V('APP_USER'); 
    :NEW.MODIFIED_ON := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/
DROP TRIGGER NAM_ERP_SOL.THANA_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."THANA_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.THANA  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM THANA;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.TOWN_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."TOWN_INFO_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.TOWN_INFO  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM TOWN_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.TRANSACTIONS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."TRANSACTIONS_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.TRANSACTIONS  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM TRANSACTIONS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.USER_PRIVILEGES_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."USER_PRIVILEGES_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.USER_PRIVILEGES 
FOR EACH ROW
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM USER_PRIVILEGES; 
    END IF; 
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE'); 
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');	 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END;
/
DROP TRIGGER NAM_ERP_SOL.USER_ROLES_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."USER_ROLES_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.USER_ROLES  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM USER_ROLES;  
    END IF;  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.UTILITY_HEAD_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL."UTILITY_HEAD_TGR"  
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.UTILITY_HEAD  
FOR EACH ROW
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM UTILITY_HEAD;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;
/
DROP TRIGGER NAM_ERP_SOL.RELIGION_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.Religion_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.RELIGION
FOR EACH ROW
BEGIN
IF INSERTING THEN
    IF :NEW.ID IS NULL THEN
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM Religion;
    END IF;
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EDUCATIONAL_INSTITUTION_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.Educational_institution_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EDUCATIONAL_INSTITUTION
FOR EACH ROW
BEGIN
IF INSERTING THEN
    IF :NEW.ID IS NULL THEN
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM Educational_institution;
    END IF;
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.SHIFT_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.SHIFT_INFO_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.SHIFT_INFO
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.SHIFT_CHANGE_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.SHIFT_CHANGE_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.SHIFT_CHANGE
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_INFO_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_INFO_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_INFO
FOR EACH ROW
BEGIN
IF INSERTING THEN
    IF :NEW.M_FLAG IS NULL THEN
        :NEW.M_FLAG := 'A';
    END IF;
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_ADDRESS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_ADDRESS_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_ADDRESS
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_WORK_EXP_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_WORK_EXP_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_WORK_EXP
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_EDUCATION_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_EDUCATION_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_EDUCATION
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_SHORT_COURSE_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_SHORT_COURSE_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_SHORT_COURSE
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_FAMILY_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_FAMILY_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_FAMILY
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_LANGUAGE_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_LANGUAGE_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_LANGUAGE
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_IT_LITERACY_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_IT_LITERACY_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_IT_LITERACY
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_REFERENCE_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_REFERENCE_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_REFERENCE
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_TRAINING_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.EMP_TRAINING_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.EMP_TRAINING
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.EMP_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.emp_tgr
before insert ON NAM_ERP_SOL.EMP
for each row
begin
if :NEW.EMPNO iS NUll then
:NEW.EMPNO := test_seq.nextval;
end if;
end;
/
DROP TRIGGER NAM_ERP_SOL.SALARY_SECTORS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.SALARY_SECTORS_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.SALARY_SECTORS
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.LANGUAGES_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.LANGUAGES_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.LANGUAGES
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP TRIGGER NAM_ERP_SOL.COMPUTER_PROGRAMS_TGR;

CREATE OR REPLACE TRIGGER NAM_ERP_SOL.COMPUTER_PROGRAMS_TGR
BEFORE INSERT OR UPDATE ON NAM_ERP_SOL.COMPUTER_PROGRAMS
FOR EACH ROW
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
DROP FUNCTION NAM_ERP_SOL.GET_FULLNAME;

CREATE OR REPLACE FUNCTION NAM_ERP_SOL."GET_FULLNAME" (p_empid NUMBER) 
   RETURN VARCHAR2 
IS 
   l_name   VARCHAR2 (200); 
BEGIN 
   SELECT first_name||' '||last_name  INTO l_name 
     FROM EMP_INFO 
    WHERE  
    ID=p_empid; 
 
   RETURN l_name; 
EXCEPTION 
   WHEN OTHERS 
   THEN 
      RETURN NULL; 
END; 

/
DROP FUNCTION NAM_ERP_SOL.LOGIN_VALID_CHECK;

CREATE OR REPLACE FUNCTION NAM_ERP_SOL."LOGIN_VALID_CHECK" (p_username varchar2, p_password varchar2) return boolean as  
v_count1 number := 0;  
begin  
if p_username is not null and p_password is not null then  
	select 1 into v_count1  
	from app_users  
	where status = 'A' and upper(username)=upper(p_username) and upper(password) = upper(password_md5(p_username, p_password));  
	  
	if v_count1 = 1 then          
		return true;  
	else  
		return false;  
	end if;  
end if;  
exception  
 when no_data_found then  
	return false;  
 when others then  
    return false;  
end login_valid_check; 

/
DROP FUNCTION NAM_ERP_SOL.PASSWORD_MD5;

CREATE OR REPLACE FUNCTION NAM_ERP_SOL."PASSWORD_MD5" (p_username in varchar2, p_password in varchar2)  
return varchar2 is  
begin  
return dbms_obfuscation_toolkit.md5(input => utl_raw.cast_to_raw(upper(p_username)||'/'||p_password));  
end password_md5;  

/
DROP PROCEDURE NAM_ERP_SOL.GET_COMPANY_AND_BRANCH_CODE;

CREATE OR REPLACE PROCEDURE NAM_ERP_SOL."GET_COMPANY_AND_BRANCH_CODE" ( 
p_username in varchar2,  
p_company_code out varchar2,  
p_branch_code out varchar2 ) 
is 
dummy varchar2(1); 
l_emp_id number; 
begin 
    select 'x' into dummy 
    from app_users 
    where upper(username) = upper(p_username) 
    and user_type = 'S' 
    and company_code is null 
    and branch_code is null; 
    p_company_code := null; 
    p_branch_code := null; 
exception 
    when no_data_found then 
        begin 
            select company_code,  null into p_company_code, p_branch_code 
            from app_users 
            where upper(username) = upper(p_username) 
            and user_type = 'C' 
            and register_user = 1 
            and company_code is not null 
            and branch_code is null; 
        exception 
            when no_data_found then 
                begin 
                    select company_code,  null into p_company_code, p_branch_code 
                    from app_users 
                    where upper(username) = upper(p_username) 
                    and user_type = 'U' 
                    and emp_id is null 
                    and company_code is not null 
                    and branch_code is null; 
                exception 
                    when no_data_found then 
                        begin 
                            select emp_id into l_emp_id 
                            from app_users 
                            where upper(username) = upper(p_username) 
                            and user_type = 'U' 
                            and emp_id is not null; 
                             
                            if l_emp_id is not null then 
                                select company_code, branch_code 
                                into p_company_code, p_branch_code 
                                from emp_info 
                                where id = l_emp_id; 
                            end if; 
                            if p_company_code is null then 
                                select company_code into p_company_code 
                                from app_users 
                                where upper(username) = upper(p_username) 
                                and user_type = 'U' 
                                and emp_id is not null; 
                            end if; 
                        exception 
                            when no_data_found then 
                                p_company_code := null; 
                                p_branch_code   := null; 
                            when others then 
                            null; 
                        end;                             
                    when others then 
                    null;                     
                end; 
            when others then 
            null; 
        end; 
    when others then 
    null; 
end; 

/
DROP PROCEDURE NAM_ERP_SOL.BLOB_TO_FILE;

CREATE OR REPLACE PROCEDURE NAM_ERP_SOL.blob_to_file (p_blob      IN OUT NOCOPY BLOB,
                                          p_dir       IN  VARCHAR2,
                                          p_filename  IN  VARCHAR2)
AS
  l_file      UTL_FILE.FILE_TYPE;
  l_buffer    RAW(32767);
  l_amount    BINARY_INTEGER := 32767;
  l_pos       INTEGER := 1;
  l_blob_len  INTEGER;
BEGIN
  l_blob_len := DBMS_LOB.getlength(p_blob);
  
  -- Open the destination file.
  l_file := UTL_FILE.fopen(p_dir, p_filename,'WB', 32767);

  -- Read chunks of the BLOB and write them to the file until complete.
  WHILE l_pos <= l_blob_len LOOP
    DBMS_LOB.read(p_blob, l_amount, l_pos, l_buffer);
    UTL_FILE.put_raw(l_file, l_buffer, TRUE);
    l_pos := l_pos + l_amount;
  END LOOP;
  
  -- Close the file.
  UTL_FILE.fclose(l_file);
  
EXCEPTION
  WHEN OTHERS THEN
   -- Close the file if something goes wrong.
    IF UTL_FILE.is_open(l_file) THEN
      UTL_FILE.fclose(l_file);
    END IF;
    RAISE;
/* WHEN UTL_FILE.invalid_operation THEN dbms_output.PUT_LINE('cannot open file invalid name');
WHEN UTL_FILE.read_error THEN dbms_output.PUT_LINE('cannot be read');
WHEN no_data_found THEN dbms_output.PUT_LINE('end of file');

UTL_FILE.fclose(l_file);
 RAISE;*/
END blob_to_file;
/
DROP SEQUENCE NAM_ERP_SOL.DEPT_SEQ;

CREATE SEQUENCE NAM_ERP_SOL.DEPT_SEQ
  START WITH 50
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;
DROP SEQUENCE NAM_ERP_SOL.EMP_SEQ;

CREATE SEQUENCE NAM_ERP_SOL.EMP_SEQ
  START WITH 8020
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78443;

-- Sequence ISEQ$$_78443 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78446;

-- Sequence ISEQ$$_78446 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78450;

-- Sequence ISEQ$$_78450 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78579;

-- Sequence ISEQ$$_78579 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78582;

-- Sequence ISEQ$$_78582 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78585;

-- Sequence ISEQ$$_78585 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78588;

-- Sequence ISEQ$$_78588 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78591;

-- Sequence ISEQ$$_78591 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78595;

-- Sequence ISEQ$$_78595 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78598;

-- Sequence ISEQ$$_78598 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78601;

-- Sequence ISEQ$$_78601 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78604;

-- Sequence ISEQ$$_78604 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78659;

-- Sequence ISEQ$$_78659 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78662;

-- Sequence ISEQ$$_78662 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78665;

-- Sequence ISEQ$$_78665 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78668;

-- Sequence ISEQ$$_78668 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78671;

-- Sequence ISEQ$$_78671 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78674;

-- Sequence ISEQ$$_78674 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78677;

-- Sequence ISEQ$$_78677 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78680;

-- Sequence ISEQ$$_78680 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78683;

-- Sequence ISEQ$$_78683 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.TEST_SEQ;

CREATE SEQUENCE NAM_ERP_SOL.TEST_SEQ
  START WITH 21
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78784;

-- Sequence ISEQ$$_78784 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78788;

-- Sequence ISEQ$$_78788 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78897;

-- Sequence ISEQ$$_78897 is created automatically by Oracle for use with an Identity column
DROP SEQUENCE NAM_ERP_SOL.ISEQ$$_78901;

-- Sequence ISEQ$$_78901 is created automatically by Oracle for use with an Identity column
