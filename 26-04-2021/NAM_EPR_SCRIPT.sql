CREATE TABLE  "BANK_INFO" 
   (	"ID" NUMBER, 
	"BANK_NAME" VARCHAR2(200), 
	"SHORT_NAME" VARCHAR2(200), 
	"ADDRESS" VARCHAR2(400), 
	"PHONE" VARCHAR2(30), 
	"EMAIL" VARCHAR2(100), 
	"FAX" VARCHAR2(100), 
	"CONTACT_PERSON" VARCHAR2(30), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "BANK_INFO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "BANK_BRANCH_INFO" 
   (	"ID" NUMBER, 
	"BANK_ID" NUMBER, 
	"BRANCH_NAME" VARCHAR2(200), 
	"SHORT_NAME" VARCHAR2(200), 
	"ADDRESS" VARCHAR2(400), 
	"PHONE" VARCHAR2(30), 
	"EMAIL" VARCHAR2(100), 
	"FAX" VARCHAR2(100), 
	"CONTACT_PERSON" VARCHAR2(30), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "BANK_BRANCH_INFO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "COMPANY_INFO" 
   (	"COMPANY_CODE" VARCHAR2(50), 
	"OWN_CODE" VARCHAR2(50) NOT NULL ENABLE, 
	"COM_NAME" VARCHAR2(200) NOT NULL ENABLE, 
	"COM_ADDRESS" VARCHAR2(300), 
	"COM_PHONE" VARCHAR2(50), 
	"COM_REG_ID" VARCHAR2(50), 
	"COM_TRADE_LICENSE_NO" VARCHAR2(50), 
	"COM_OWNER_NAME" VARCHAR2(100), 
	"COM_OWNER_CONTACT" VARCHAR2(50), 
	"COM_EMAIL" VARCHAR2(100), 
	"COM_COM_EST" NUMBER(4,0), 
	"COM_LOGO" BLOB, 
	"MIME_TYPE" VARCHAR2(225), 
	"FILE_NAME" VARCHAR2(225), 
	"CHARSET" VARCHAR2(50), 
	"BLOB_UPDATE" DATE, 
	"COM_BRANCH_LIMIT" NUMBER(5,0), 
	"COM_USER_LIMIT" NUMBER(5,0), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	"COMPANY_SHORT" VARCHAR2(10), 
	 CONSTRAINT "COMPANY_INFO_PK" PRIMARY KEY ("COMPANY_CODE")
  USING INDEX  ENABLE, 
	 UNIQUE ("COM_EMAIL")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "COMPANY_BRANCH_INFO" 
   (	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"BRANCH_NAME" VARCHAR2(200), 
	"BRANCH_ADDRESS" VARCHAR2(300), 
	"BRANCH_PHONE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "COMPANY_BRANCH_INFO_PK" PRIMARY KEY ("BRANCH_CODE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "COMPANY_DEPARTMENT_INFO" 
   (	"ID" NUMBER, 
	"DEPARTMENT_NAME" VARCHAR2(200), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "COMPANY_DEPARTMENT_INFO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "COMPANY_DEPARTMENT_INFO_CON" UNIQUE ("DEPARTMENT_NAME", "COMPANY_CODE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "COMPANY_SECTION_INFO" 
   (	"ID" NUMBER, 
	"DEPT_ID" NUMBER, 
	"SECTION_NAME" VARCHAR2(200), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "COMPANY_SECTION_INFO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "COMPANY_SECTION_INFO_CON" UNIQUE ("SECTION_NAME", "DEPT_ID", "COMPANY_CODE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "USER_ROLES" 
   (	"ID" NUMBER, 
	"ROLE_CODE" VARCHAR2(2) NOT NULL ENABLE, 
	"ROLE_NAME" VARCHAR2(50), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"OWN_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "USER_ROLES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "APP_USERS" 
   (	"ID" NUMBER, 
	"ROLE_ID" NUMBER, 
	"EMP_ID" NUMBER, 
	"USERNAME" VARCHAR2(50), 
	"EMAIL" VARCHAR2(200), 
	"PASSWORD" VARCHAR2(255), 
	"MOBILE_NO" VARCHAR2(15), 
	"COMPANY_CODE" VARCHAR2(50), 
	"BRANCH_CODE" VARCHAR2(50), 
	"USER_TYPE" VARCHAR2(2) DEFAULT 'U', 
	"OWN_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	"STATUS" VARCHAR2(1) DEFAULT 'A', 
	"REGISTER_USER" NUMBER(1,0) DEFAULT 0, 
	 CONSTRAINT "APP_USERS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 UNIQUE ("USERNAME")
  USING INDEX  ENABLE, 
	 UNIQUE ("EMAIL")
  USING INDEX  ENABLE, 
	 UNIQUE ("MOBILE_NO")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "MENU_PRIVILEGES" 
   (	"ID" NUMBER, 
	"ROLE_ID" NUMBER, 
	"MENU_IDS" VARCHAR2(500), 
	"OWN_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "MENU_PRIVILEGES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 UNIQUE ("ROLE_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "MODULES" 
   (	"ID" NUMBER, 
	"OWN_CODE" VARCHAR2(50), 
	"MODULE_NAME" VARCHAR2(100), 
	"MODULE_DESC" VARCHAR2(100), 
	"MODULE_IMAGE" BLOB, 
	"MIME_TYPE" VARCHAR2(255), 
	"FILE_NAME" VARCHAR2(255), 
	"CHAR_SET" VARCHAR2(255), 
	"IMAGE_LAST_UPDATE" DATE, 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	"DASHBOARD_PAGENO" NUMBER, 
	 CONSTRAINT "MODULES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "MODULE_MENU_PRIVILEGES" 
   (	"ID" NUMBER, 
	"MODULE_ID" NUMBER, 
	"MAIN_MENU_ID" NUMBER, 
	"MENU_ID" NUMBER, 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "MODULE_MENU_PRIVILEGES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "MENUS" 
   (	"ID" NUMBER, 
	"OWN_CODE" VARCHAR2(50), 
	"MENU_DESC" VARCHAR2(100), 
	"PAGE_NO" NUMBER(15,0), 
	"PAR_MENU_ID" NUMBER, 
	"SEQ_NO" NUMBER, 
	"MENU_ICON" VARCHAR2(200), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"MENU_ACCESS" VARCHAR2(1) DEFAULT 'C', 
	"MENU_HOME" NUMBER(1,0) DEFAULT 0, 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "MENUS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "DEPT" 
   (	"DEPTNO" NUMBER(2,0), 
	"DNAME" VARCHAR2(14), 
	"LOC" VARCHAR2(13), 
	 PRIMARY KEY ("DEPTNO")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP" 
   (	"EMPNO" NUMBER(4,0) NOT NULL ENABLE, 
	"ENAME" VARCHAR2(10), 
	"JOB" VARCHAR2(9), 
	"MGR" NUMBER(4,0), 
	"HIREDATE" DATE, 
	"SAL" NUMBER(7,2), 
	"COMM" NUMBER(7,2), 
	"DEPTNO" NUMBER(2,0), 
	 PRIMARY KEY ("EMPNO")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP_INFO" 
   (	"ID" NUMBER, 
	"PIN" VARCHAR2(100), 
	"CARD_NO" VARCHAR2(30), 
	"NATIONAL_ID" VARCHAR2(100), 
	"FIRST_NAME" VARCHAR2(250), 
	"MIDDLE_NAME" VARCHAR2(120), 
	"LAST_NAME" VARCHAR2(120), 
	"NATIVE_NAME" VARCHAR2(200), 
	"DOB" DATE, 
	"POB" VARCHAR2(100), 
	"SEX" VARCHAR2(10), 
	"MARITAL_STATUS" VARCHAR2(10), 
	"ID_MARK" VARCHAR2(50), 
	"BLOOD_GROUP" VARCHAR2(15), 
	"PASSPORT_NO" VARCHAR2(30), 
	"PASS_PLACE_OF_ISSUE" VARCHAR2(50), 
	"PASS_VALID_TILL" DATE, 
	"RELIGION_ID" NUMBER, 
	"NATIONALITY_NAME" VARCHAR2(100), 
	"REF_EMP" VARCHAR2(60), 
	"STATUS" VARCHAR2(15), 
	"FATHER_NAME" VARCHAR2(100), 
	"MOTHER_NAME" VARCHAR2(100), 
	"HUSBAND_NAME" VARCHAR2(100), 
	"BEHAVIOR" VARCHAR2(200), 
	"EMP_PHOTO" BLOB, 
	"MIME_TYPE" VARCHAR2(225), 
	"FILE_NAME" VARCHAR2(225), 
	"CHAR_SET" VARCHAR2(225), 
	"PHOTO_LAST_UPDATE" DATE, 
	"EMAIL" VARCHAR2(100), 
	"TEMP" NUMBER, 
	"EMP_SIGN" BLOB, 
	"SIGN_MIME_TYPE" VARCHAR2(225), 
	"SIGN_FILE_NAME" VARCHAR2(225), 
	"SIGN_CHAR_SET" VARCHAR2(225), 
	"SIGN_LAST_UPDATE" DATE, 
	"HEIGHT" VARCHAR2(10), 
	"DEPT_ID" NUMBER, 
	"SECTION_ID" NUMBER, 
	"DESIG_ID" NUMBER, 
	"OFFICE_LOCATION" VARCHAR2(200), 
	"EMP_TYPE" VARCHAR2(20), 
	"GRADE_ID" NUMBER, 
	"JOINING_DATE" DATE, 
	"CONFIRM_DATE" DATE, 
	"INACTIVE_DATE" DATE, 
	"M_FLAG" CHAR(1), 
	"PROVISION_PERIOD" VARCHAR2(10), 
	"BASIC_SAL" NUMBER(10,2), 
	"HOUSE_RENT" NUMBER(10,2), 
	"MEDICAL" NUMBER(10,2), 
	"SPECIAL_ALLOW" NUMBER(10,2), 
	"CONV_ALLOW" NUMBER(10,2), 
	"FOOD_ALLOW" NUMBER(10,2), 
	"MOB_BILL" NUMBER(10,2), 
	"HOLIDAY_ALLOW" NUMBER(10,2), 
	"OTHERS_ALLOW" NUMBER(10,2), 
	"NIGHT_RATE" NUMBER(10,2), 
	"WORK_ENT" VARCHAR2(10), 
	"OT_ENT" CHAR(1) DEFAULT 'N', 
	"TRAN_FUEL" NUMBER(10,2), 
	"TRANSPORT_ENT" VARCHAR2(4), 
	"WELFARE_CONTRIBUTION" NUMBER(10,2), 
	"DORMATORY_CHG" NUMBER(10,2), 
	"HOUSE_RENT_DEDUCT" NUMBER(10,2), 
	"TAX_ENT" VARCHAR2(4), 
	"TAX_DEDUCT" NUMBER(10,2), 
	"PF" CHAR(1), 
	"PROVID_FUND" CHAR(1), 
	"RES_ENT" VARCHAR2(4), 
	"WEEKLY_OFF_NUM" NUMBER(1,0), 
	"WEEKLY_OFF_1" VARCHAR2(15), 
	"WEEKLY_OFF_2" VARCHAR2(15), 
	"WEEKLY_OFF_3" VARCHAR2(100), 
	"SAL_HOLDER" CHAR(1) DEFAULT 'Y', 
	"BANK_ACC_NO" VARCHAR2(20), 
	"TIN_NO" VARCHAR2(30), 
	"CAL_CODE" VARCHAR2(20), 
	"SHIFT_ID" NUMBER, 
	"SHIFT_ROSTERING" CHAR(1) DEFAULT 'N', 
	"LAST_SHIFT_CHANGE_ID" NUMBER, 
	"LAST_SHIFT_ROSTER_DATE" DATE, 
	"LAST_SHIFT_ROSTER_DIRECTION" CHAR(1), 
	"FLOOR_ID" VARCHAR2(10), 
	"RESIGN_DATE" DATE, 
	"CAUSES_OF_RESIGN" VARCHAR2(150), 
	"WORKING_FLAG" VARCHAR2(30) DEFAULT 'F', 
	"COMPLIANCE_EMP_TYPE" VARCHAR2(10) DEFAULT 'FS', 
	"RELEASE_DATE" DATE, 
	"REASON" VARCHAR2(200), 
	"ROSTER_ALLOW" NUMBER(6,0), 
	"OFFICER_FLAG" NUMBER, 
	"EFFECTIVE_DATE" DATE, 
	"INCENTIVE" NUMBER(8,0), 
	"SAL_CAL_METHOD" VARCHAR2(2) DEFAULT 'R', 
	"MOBILE_BANKING_NO" VARCHAR2(14), 
	"EMP_LEVEL" VARCHAR2(2), 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EMP_PERSONAL_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP_ADDRESS" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMP_ID" NUMBER, 
	"PER_CARE_OFF" VARCHAR2(40), 
	"PER_HOUSE_NO" VARCHAR2(40), 
	"PER_ROAD_NO" VARCHAR2(40), 
	"PER_BLOCK_NO" VARCHAR2(40), 
	"PER_CITY_VILL" VARCHAR2(40), 
	"PER_THANA_ID" NUMBER, 
	"PER_DISTRICT_ID" NUMBER, 
	"PER_DIVISION_ID" NUMBER, 
	"PER_POST_CODE" VARCHAR2(40), 
	"PER_POST_NAME" VARCHAR2(150), 
	"PER_PHONE" VARCHAR2(30), 
	"PER_MOBILE" VARCHAR2(40), 
	"PER_FAX" VARCHAR2(30), 
	"PRE_CARE_OFF" VARCHAR2(40), 
	"PRE_HOUSE_NO" VARCHAR2(40), 
	"PRE_ROAD_NO" VARCHAR2(40), 
	"PRE_BLOCK_NO" VARCHAR2(40), 
	"PRE_CITY_VILL" VARCHAR2(40), 
	"PRE_THANA_ID" NUMBER, 
	"PRE_DISTRICT_ID" NUMBER, 
	"PRE_DIVISION_ID" NUMBER, 
	"PRE_POST_CODE" VARCHAR2(40), 
	"PRE_PHONE" VARCHAR2(30), 
	"PRE_MOBILE" VARCHAR2(40), 
	"PRE_FAX" VARCHAR2(30), 
	"PRE_POST_NAME" VARCHAR2(150), 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EMP_ADDRESS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP_WORK_EXP" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMP_ID" NUMBER, 
	"ORG_NAME" VARCHAR2(50), 
	"DESIGNATION" VARCHAR2(30), 
	"D_FROM" DATE, 
	"D_TO" DATE, 
	"LEAVE_REASON" VARCHAR2(50), 
	"ORG_ADDRESS" VARCHAR2(20), 
	"ORG_TEL" VARCHAR2(10), 
	"LAST_SAL_DRAWN" NUMBER, 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EMP_WORK_EXP_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP_EDUCATION" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMP_ID" NUMBER, 
	"NAME_OF_INST" VARCHAR2(100), 
	"PASSED_EXAM" VARCHAR2(50), 
	"SUBJECT" VARCHAR2(50), 
	"DIVISION_GRADE" VARCHAR2(30), 
	"YEAR" VARCHAR2(5), 
	"BOARD" VARCHAR2(100), 
	"MARKS" NUMBER(4,0), 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EMP_EDUCATION_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP_SHORT_COURSE" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMP_ID" NUMBER, 
	"COURSE_NAME" VARCHAR2(100), 
	"INSTITUTE" VARCHAR2(100), 
	"C_FROM" DATE, 
	"C_TO" DATE, 
	"CERT_NAME" VARCHAR2(100), 
	"REMARKS" VARCHAR2(100), 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EMP_SHORT_COURSE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP_TRAINING" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMP_ID" NUMBER, 
	"T_TITLE" VARCHAR2(100), 
	"T_INSTITUTE" VARCHAR2(100), 
	"T_FROM" DATE, 
	"T_TO" DATE, 
	"T_CERTIFICATE" VARCHAR2(100), 
	"REMARKS" VARCHAR2(30), 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EMP_TRAINING_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP_FAMILY" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMP_ID" NUMBER, 
	"DEPENDANCY_NO" NUMBER(2,0), 
	"DEPENDANCY_NAME" VARCHAR2(100), 
	"RELATIONSHIP" VARCHAR2(40), 
	"D_DOB" DATE, 
	"D_AGE" NUMBER(4,0), 
	"D_SEX" VARCHAR2(7), 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EMP_FAMILY_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP_LANGUAGE" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMP_ID" NUMBER, 
	"LANGUAGE_ID" NUMBER, 
	"L_SPEAK" VARCHAR2(40), 
	"L_READ" VARCHAR2(40), 
	"L_WRITE" VARCHAR2(40), 
	"L_UNDERSTAND" VARCHAR2(40), 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EMP_LANGUAGE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP_IT_LITERACY" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMP_ID" NUMBER, 
	"PROG_ID" NUMBER, 
	"EXCELENT" VARCHAR2(5), 
	"GOOD" VARCHAR2(5), 
	"FAIR" VARCHAR2(5), 
	"KNOW_LITTLE" VARCHAR2(5), 
	"DO_NOT_KNOW_AT_ALL" VARCHAR2(5), 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EMP_IT_LITERACY_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EMP_REFERENCE" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMP_ID" NUMBER, 
	"SL_NO" NUMBER(2,0), 
	"NAME" VARCHAR2(100), 
	"RELATION" VARCHAR2(100), 
	"ORG_NAME" VARCHAR2(100), 
	"DESIGNATION" VARCHAR2(100), 
	"REF_TYPE" VARCHAR2(30), 
	"ADDRESS" VARCHAR2(300), 
	"CONTACT_NO" VARCHAR2(30), 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EMP_REFERENCE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EDUCATION_LEVEL" 
   (	"ID" NUMBER, 
	"EDUCATION_NAME" VARCHAR2(100), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EDUCATION_LEVEL_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "MONEY_TRANSFERS" 
   (	"FROM_CUSTOMER_ID" NUMBER, 
	"F_LPAID_INST_NO" NUMBER, 
	"TO_CUSTOMER_ID" NUMBER, 
	"TRANSFER_ID" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"T_LPAID_INST_NO" NUMBER, 
	"REMARKS" VARCHAR2(1000), 
	"COMPANY_CODE" VARCHAR2(50), 
	"BRANCH_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15)
   )
/
CREATE TABLE  "UTILITY_HEAD" 
   (	"ID" NUMBER, 
	"HEAD_NAME" VARCHAR2(200), 
	"SHORT_NAME" VARCHAR2(200), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "UTILITY_HEAD_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "AGREEMENTS" 
   (	"ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"AGREEMENT_AMOUNT" NUMBER, 
	"AGREEMENT_DATE" DATE, 
	"ISACTIVE" NUMBER(*,0), 
	"INSTALLMENT_NO" NUMBER, 
	"DUE_FLAG" VARCHAR2(1) DEFAULT 'Y', 
	"PAID_AMT" NUMBER DEFAULT 0, 
	"PAID_DATE" DATE, 
	"TRANSFER_FROM_CUST_ID" NUMBER, 
	"COMPANY_CODE" VARCHAR2(50), 
	"BRANCH_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "AGREEMENTS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "DIVISION" 
   (	"ID" NUMBER, 
	"DIVISION_NAME" VARCHAR2(100), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "DIVISION_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "THANA" 
   (	"ID" NUMBER, 
	"DISTRICT_ID" NUMBER, 
	"THANA_NAME" VARCHAR2(100), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	"DIVISION_ID" NUMBER, 
	 CONSTRAINT "THANA_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "TAB1" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME" VARCHAR2(30), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "MONEY_RECEIPTS" 
   (	"ID" NUMBER, 
	"RECEIVED_DATE" DATE, 
	"CUSTOMER_ID" NUMBER, 
	"RECEIVED_AMOUNT" NUMBER, 
	"RECEIVED_TYPE" VARCHAR2(300), 
	"CHEQUE_NO" VARCHAR2(100), 
	"BANK_ID" NUMBER, 
	"BRANCH_ID" NUMBER, 
	"CHEQUE_DATE" DATE, 
	"CHEQUE_DISHONOUR" NUMBER(1,0), 
	"REMARKS" VARCHAR2(100), 
	"DISCOUNT_AMOUNT" NUMBER, 
	"SERVICE_CHARGE_AMOUNT" NUMBER, 
	"TRANSFER_FROM_CUST_ID" NUMBER, 
	"HIDE_FLAG" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"BRANCH_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "MONEY_RECEIPTS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "LAND_SIZE_INFO" 
   (	"ID" NUMBER, 
	"SIZE_NAME" VARCHAR2(100), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "LAND_SIZE_INFO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "TRANSACTIONS" 
   (	"ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"TOTAL_AMOUNT" NUMBER, 
	"BOOKING_AMOUNT" NUMBER, 
	"DISCNT" NUMBER, 
	"SDISCNT" NUMBER, 
	"BOOKING_DATE" DATE, 
	"TOTAL_INSTALLMENT_NO" NUMBER, 
	"ISACTIVE" NUMBER, 
	"BOOKING_FLAG" NUMBER(2,0) DEFAULT 0 NOT NULL ENABLE, 
	"COMPANY_CODE" VARCHAR2(50), 
	"BRANCH_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "TRANSACTIONS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EDUCATIONAL_INSTITUTION" 
   (	"ID" NUMBER, 
	"INSTITUTION_NAME" VARCHAR2(100), 
	"ADDRESS" VARCHAR2(200), 
	"PHONE" VARCHAR2(30), 
	"EST" NUMBER(4,0), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "EDUCATIONAL_INSTITUTION_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "SOFTWARE_INFO" 
   (	"OWN_CODE" VARCHAR2(50), 
	"OWN_COM_NAME" VARCHAR2(200), 
	"OWN_ADDRESS" VARCHAR2(300), 
	"OWN_PHONE" VARCHAR2(50), 
	"OWN_REG_ID" VARCHAR2(50), 
	"OWN_TRADE_LICENSE" VARCHAR2(50), 
	"OWN_CONTACT" VARCHAR2(50), 
	"OWN_EMAIL" VARCHAR2(100), 
	"OWN_EST" NUMBER(4,0), 
	"OWN_LOGO" BLOB, 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	"SOFTWARE_NAME" VARCHAR2(300), 
	 CONSTRAINT "SOFTWARE_INFO_INFO_PK" PRIMARY KEY ("OWN_CODE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "RELIGION" 
   (	"ID" NUMBER, 
	"RELIGION_NAME" VARCHAR2(100), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "RELIGION_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "DISTRICT" 
   (	"ID" NUMBER, 
	"DISTRICT_NAME" VARCHAR2(100), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	"DIVISION_ID" NUMBER, 
	 CONSTRAINT "DISTRICT_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "DESIGNATION" 
   (	"ID" NUMBER, 
	"DESIG_CODE" VARCHAR2(20), 
	"DESIG_NAME" VARCHAR2(100), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "DESIGNATION_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CUSTOMERS" 
   (	"ID" NUMBER, 
	"NAME" VARCHAR2(200), 
	"MOTHERS_NAME" VARCHAR2(120), 
	"FATHER_NAME" VARCHAR2(120), 
	"NATIONAL_ID_NO" VARCHAR2(100), 
	"AGE" NUMBER, 
	"BIRTH_CERTIFICATE_NO" VARCHAR2(100), 
	"CARE_OF_NAME" VARCHAR2(150), 
	"TRANSFER_TO_CUST_ID" NUMBER, 
	"BLOCK_NO" VARCHAR2(150), 
	"CARE_OF_CATEGORY" VARCHAR2(100), 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"COMPOSITE_ID" VARCHAR2(100), 
	"CUSTOMER_OLD_ID" VARCHAR2(100), 
	"EMAIL" VARCHAR2(150), 
	"IMAGE" BLOB, 
	"MIME_TYPE" VARCHAR2(50), 
	"FILE_NAME" VARCHAR2(50), 
	"CHARSET" VARCHAR2(50), 
	"BLOB_UPDATE" TIMESTAMP (6), 
	"FILE_NO" VARCHAR2(150), 
	"FILE_ATTACHMENT" BLOB, 
	"FILE_MIME_TYPE" VARCHAR2(50), 
	"FILE_FILE_NAME" VARCHAR2(50), 
	"FILE_CHARSET" VARCHAR2(50), 
	"FILE_BLOB_UPDATE" TIMESTAMP (6), 
	"ISACTIVE" NUMBER(*,0), 
	"LAND_SIZE_ID" NUMBER, 
	"MOUZA_ID" NUMBER, 
	"NID" VARCHAR2(100), 
	"NOMINEE_1" VARCHAR2(500), 
	"NOMINEE_1_RELATION" VARCHAR2(120), 
	"NOMINEE_2" VARCHAR2(120), 
	"NOMINEE_2_RELATION" VARCHAR2(120), 
	"OLD_BOOK_ID" VARCHAR2(120), 
	"PHONE_NO" VARCHAR2(250), 
	"PLOT_NO" VARCHAR2(200) DEFAULT 1, 
	"PRESENT_ADDRESS" VARCHAR2(300), 
	"REGI_DATE" DATE, 
	"REGI_NO" VARCHAR2(100), 
	"REGI_PLOT_NO" VARCHAR2(300), 
	"ROAD_NO" VARCHAR2(100), 
	"RS_DAG" VARCHAR2(200), 
	"SCHEME_ID" NUMBER, 
	"SECTOR_NO" VARCHAR2(100), 
	"TOWN_ID" NUMBER, 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "CUSTOMERS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 UNIQUE ("EMAIL")
  USING INDEX  ENABLE, 
	 UNIQUE ("REGI_NO")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "TOWN_INFO" 
   (	"ID" NUMBER, 
	"TOWN_NAME" VARCHAR2(100), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "TOWN_INFO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "HTMLDB_PLAN_TABLE" 
   (	"STATEMENT_ID" VARCHAR2(30), 
	"PLAN_ID" NUMBER, 
	"TIMESTAMP" DATE, 
	"REMARKS" VARCHAR2(4000), 
	"OPERATION" VARCHAR2(30), 
	"OPTIONS" VARCHAR2(255), 
	"OBJECT_NODE" VARCHAR2(128), 
	"OBJECT_OWNER" VARCHAR2(128), 
	"OBJECT_NAME" VARCHAR2(128), 
	"OBJECT_ALIAS" VARCHAR2(261), 
	"OBJECT_INSTANCE" NUMBER(*,0), 
	"OBJECT_TYPE" VARCHAR2(128), 
	"OPTIMIZER" VARCHAR2(255), 
	"SEARCH_COLUMNS" NUMBER, 
	"ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"DEPTH" NUMBER(*,0), 
	"POSITION" NUMBER(*,0), 
	"COST" NUMBER(*,0), 
	"CARDINALITY" NUMBER(*,0), 
	"BYTES" NUMBER(*,0), 
	"OTHER_TAG" VARCHAR2(255), 
	"PARTITION_START" VARCHAR2(255), 
	"PARTITION_STOP" VARCHAR2(255), 
	"PARTITION_ID" NUMBER(*,0), 
	"OTHER" LONG, 
	"DISTRIBUTION" VARCHAR2(30), 
	"CPU_COST" NUMBER(*,0), 
	"IO_COST" NUMBER(*,0), 
	"TEMP_SPACE" NUMBER(*,0), 
	"ACCESS_PREDICATES" VARCHAR2(4000), 
	"FILTER_PREDICATES" VARCHAR2(4000), 
	"PROJECTION" VARCHAR2(4000), 
	"TIME" NUMBER(*,0), 
	"QBLOCK_NAME" VARCHAR2(128)
   )
/
CREATE TABLE  "SCHEME_INFO" 
   (	"ID" NUMBER, 
	"SCHEME_NAME" VARCHAR2(100), 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "SCHEME_INFO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "SHIFT_INFO" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SHIFT_CODE" VARCHAR2(12) NOT NULL ENABLE, 
	"SHIFT_NAME" VARCHAR2(100), 
	"IN_TIME" NUMBER(8,2), 
	"OUT_TIME" NUMBER(8,2), 
	"GRACE_PERIOD" NUMBER(8,2), 
	"MEAL_TIME" NUMBER(8,2), 
	"IN_LIMIT_BEFORE" NUMBER(3,0), 
	"IN_LIMIT_AFTER" NUMBER(2,0), 
	"OT_LIMIT" NUMBER(2,0), 
	"SHIFT_IN_TIME" DATE, 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "SHIFT_INFO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "USER_PRIVILEGES" 
   (	"ID" NUMBER, 
	"USER_ID" NUMBER, 
	"MODULE_ID" NUMBER, 
	"MAIN_MENU_ID" NUMBER, 
	"MENU_ID" VARCHAR2(100), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	"REGISTER_USER" NUMBER(1,0) DEFAULT 0, 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	 CONSTRAINT "USER_PRIVILEGES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "USER_PRIVILEGES_UQ" UNIQUE ("USER_ID", "MODULE_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "SHIFT_CHANGE" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SHIFT_CODE_FROM" VARCHAR2(20), 
	"SHIFT_CODE_TO" VARCHAR2(20), 
	"SHIFT_CHANGE_DATE" DATE, 
	"SHIFT_CHANGE_TIME" NUMBER(*,0), 
	"APPROVE_BY" NUMBER, 
	"APPROVE_DATE" DATE, 
	"STATUS_FLAG" VARCHAR2(1) DEFAULT 'I', 
	"STATUS" VARCHAR2(1) DEFAULT 'Y', 
	"BRANCH_CODE" VARCHAR2(50), 
	"COMPANY_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "SHIFT_CHANGE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "INSTALLMENTS" 
   (	"ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"AGREEMENT_ID" NUMBER, 
	"MRID" NUMBER(10,0), 
	"COMPOSITE_MR" VARCHAR2(15), 
	"INSTALLMENT_AMOUNT" NUMBER, 
	"INSTALLMENT_DATE" DATE, 
	"PAYMENT_TYPE" CHAR(20), 
	"ISACTIVE" NUMBER(38,0), 
	"CHEQUE_NO" CHAR(50), 
	"CHEQUE_DATE" DATE, 
	"BANK_ID" NUMBER, 
	"BANK_BRANCH_ID" NUMBER, 
	"TRANSFER_FROM_CUST_ID" NUMBER, 
	"INS_TEMP" NUMBER, 
	"COMPANY_CODE" VARCHAR2(50), 
	"BRANCH_CODE" VARCHAR2(50), 
	"CREATED_BY" VARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_TIME" VARCHAR2(15), 
	"MODIFIED_BY" VARCHAR2(50), 
	"MODIFIED_ON" TIMESTAMP (6), 
	"MODIFIED_TIME" VARCHAR2(15), 
	 CONSTRAINT "INSTALLMENTS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "BANK_BRANCH_INFO" ADD CONSTRAINT "BANK_BRANCH_INFO_FK" FOREIGN KEY ("BANK_ID")
	  REFERENCES  "BANK_INFO" ("ID") ENABLE
/
ALTER TABLE  "COMPANY_BRANCH_INFO" ADD CONSTRAINT "COMPANY_BRANCH_INFO_FK" FOREIGN KEY ("COMPANY_CODE")
	  REFERENCES  "COMPANY_INFO" ("COMPANY_CODE") ENABLE
/
ALTER TABLE  "COMPANY_DEPARTMENT_INFO" ADD CONSTRAINT "COMPANY_DEPARTMENT_INFO_BR_FK" FOREIGN KEY ("BRANCH_CODE")
	  REFERENCES  "COMPANY_BRANCH_INFO" ("BRANCH_CODE") ENABLE
/
ALTER TABLE  "COMPANY_DEPARTMENT_INFO" ADD CONSTRAINT "COMPANY_DEPARTMENT_INFO_FK" FOREIGN KEY ("COMPANY_CODE")
	  REFERENCES  "COMPANY_INFO" ("COMPANY_CODE") ENABLE
/
ALTER TABLE  "COMPANY_SECTION_INFO" ADD CONSTRAINT "COMPANY_SECTION_INFO_BR_FK" FOREIGN KEY ("BRANCH_CODE")
	  REFERENCES  "COMPANY_BRANCH_INFO" ("BRANCH_CODE") ENABLE
/
ALTER TABLE  "COMPANY_SECTION_INFO" ADD CONSTRAINT "COMPANY_SECTION_INFO_COM_FK" FOREIGN KEY ("COMPANY_CODE")
	  REFERENCES  "COMPANY_INFO" ("COMPANY_CODE") ENABLE
/
ALTER TABLE  "COMPANY_SECTION_INFO" ADD CONSTRAINT "COMPANY_SECTION_INFO_FK" FOREIGN KEY ("DEPT_ID")
	  REFERENCES  "COMPANY_DEPARTMENT_INFO" ("ID") ENABLE
/
ALTER TABLE  "MENUS" ADD CONSTRAINT "MENUS_PAR_FK" FOREIGN KEY ("PAR_MENU_ID")
	  REFERENCES  "MENUS" ("ID") ENABLE
/
ALTER TABLE  "MENU_PRIVILEGES" ADD CONSTRAINT "MENU_PRIVILEGES_FK" FOREIGN KEY ("ROLE_ID")
	  REFERENCES  "USER_ROLES" ("ID") ENABLE
/
ALTER TABLE  "EMP" ADD FOREIGN KEY ("MGR")
	  REFERENCES  "EMP" ("EMPNO") ENABLE
/
ALTER TABLE  "EMP" ADD FOREIGN KEY ("DEPTNO")
	  REFERENCES  "DEPT" ("DEPTNO") ENABLE
/
ALTER TABLE  "APP_USERS" ADD CONSTRAINT "APP_USERS_FK" FOREIGN KEY ("ROLE_ID")
	  REFERENCES  "USER_ROLES" ("ID") ENABLE
/
ALTER TABLE  "MODULE_MENU_PRIVILEGES" ADD CONSTRAINT "MODULE_MENU_PRIVILEGES_FK" FOREIGN KEY ("MODULE_ID")
	  REFERENCES  "MODULES" ("ID") ENABLE
/
ALTER TABLE  "EMP_ADDRESS" ADD CONSTRAINT "EMP_ADDRESS_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES  "EMP_INFO" ("ID") ENABLE
/
ALTER TABLE  "EMP_WORK_EXP" ADD CONSTRAINT "EMP_WORK_EXP_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES  "EMP_INFO" ("ID") ENABLE
/
ALTER TABLE  "EMP_EDUCATION" ADD CONSTRAINT "EMP_EDUCATION_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES  "EMP_INFO" ("ID") ENABLE
/
ALTER TABLE  "EMP_SHORT_COURSE" ADD CONSTRAINT "EMP_SHORT_COURSE_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES  "EMP_INFO" ("ID") ENABLE
/
ALTER TABLE  "EMP_TRAINING" ADD CONSTRAINT "EMP_TRAINING_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES  "EMP_INFO" ("ID") ENABLE
/
ALTER TABLE  "EMP_FAMILY" ADD CONSTRAINT "EMP_FAMILY_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES  "EMP_INFO" ("ID") ENABLE
/
ALTER TABLE  "EMP_LANGUAGE" ADD CONSTRAINT "EMP_LANGUAGE_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES  "EMP_INFO" ("ID") ENABLE
/
ALTER TABLE  "EMP_IT_LITERACY" ADD CONSTRAINT "EMP_IT_LITERACY_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES  "EMP_INFO" ("ID") ENABLE
/
ALTER TABLE  "EMP_REFERENCE" ADD CONSTRAINT "EMP_REFERENCE_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES  "EMP_INFO" ("ID") ENABLE
/
CREATE OR REPLACE EDITIONABLE FUNCTION  "GET_FULLNAME" (p_empid NUMBER) 
   RETURN VARCHAR2 
IS 
   l_name   VARCHAR2 (200); 
BEGIN 
   SELECT first_name||' '||last_name  INTO l_name 
     FROM EMP_INFO 
    WHERE  
    ID=p_empid; 
 
   RETURN l_name; 
EXCEPTION 
   WHEN OTHERS 
   THEN 
      RETURN NULL; 
END; 
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "LOGIN_VALID_CHECK" (p_username varchar2, p_password varchar2) return boolean as  
v_count1 number := 0;  
begin  
if p_username is not null and p_password is not null then  
	select 1 into v_count1  
	from app_users  
	where status = 'A' and upper(username)=upper(p_username) and upper(password) = upper(password_md5(p_username, p_password));  
	  
	if v_count1 = 1 then          
		return true;  
	else  
		return false;  
	end if;  
end if;  
exception  
 when no_data_found then  
	return false;  
 when others then  
    return false;  
end login_valid_check; 
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "PASSWORD_MD5" (p_username in varchar2, p_password in varchar2)  
return varchar2 is  
begin  
return dbms_obfuscation_toolkit.md5(input => utl_raw.cast_to_raw(upper(p_username)||'/'||p_password));  
end password_md5;  
/

CREATE UNIQUE INDEX  "AGREEMENTS_PK" ON  "AGREEMENTS" ("ID")
/
CREATE UNIQUE INDEX  "APP_USERS_PK" ON  "APP_USERS" ("ID")
/
CREATE UNIQUE INDEX  "BANK_BRANCH_INFO_PK" ON  "BANK_BRANCH_INFO" ("ID")
/
CREATE UNIQUE INDEX  "BANK_INFO_PK" ON  "BANK_INFO" ("ID")
/
CREATE UNIQUE INDEX  "COMPANY_BRANCH_INFO_PK" ON  "COMPANY_BRANCH_INFO" ("BRANCH_CODE")
/
CREATE UNIQUE INDEX  "COMPANY_DEPARTMENT_INFO_CON" ON  "COMPANY_DEPARTMENT_INFO" ("DEPARTMENT_NAME", "COMPANY_CODE")
/
CREATE UNIQUE INDEX  "COMPANY_DEPARTMENT_INFO_PK" ON  "COMPANY_DEPARTMENT_INFO" ("ID")
/
CREATE UNIQUE INDEX  "COMPANY_INFO_PK" ON  "COMPANY_INFO" ("COMPANY_CODE")
/
CREATE UNIQUE INDEX  "COMPANY_SECTION_INFO_CON" ON  "COMPANY_SECTION_INFO" ("SECTION_NAME", "DEPT_ID", "COMPANY_CODE")
/
CREATE UNIQUE INDEX  "COMPANY_SECTION_INFO_PK" ON  "COMPANY_SECTION_INFO" ("ID")
/
CREATE UNIQUE INDEX  "CUSTOMERS_PK" ON  "CUSTOMERS" ("ID")
/
CREATE UNIQUE INDEX  "DESIGNATION_PK" ON  "DESIGNATION" ("ID")
/
CREATE UNIQUE INDEX  "DISTRICT_PK" ON  "DISTRICT" ("ID")
/
CREATE UNIQUE INDEX  "DIVISION_PK" ON  "DIVISION" ("ID")
/
CREATE UNIQUE INDEX  "EDUCATIONAL_INSTITUTION_PK" ON  "EDUCATIONAL_INSTITUTION" ("ID")
/
CREATE UNIQUE INDEX  "EDUCATION_LEVEL_PK" ON  "EDUCATION_LEVEL" ("ID")
/
CREATE UNIQUE INDEX  "EMP_ADDRESS_PK" ON  "EMP_ADDRESS" ("ID")
/
CREATE UNIQUE INDEX  "EMP_EDUCATION_PK" ON  "EMP_EDUCATION" ("ID")
/
CREATE UNIQUE INDEX  "EMP_FAMILY_PK" ON  "EMP_FAMILY" ("ID")
/
CREATE UNIQUE INDEX  "EMP_IT_LITERACY_PK" ON  "EMP_IT_LITERACY" ("ID")
/
CREATE UNIQUE INDEX  "EMP_LANGUAGE_PK" ON  "EMP_LANGUAGE" ("ID")
/
CREATE UNIQUE INDEX  "EMP_PERSONAL_PK" ON  "EMP_INFO" ("ID")
/
CREATE UNIQUE INDEX  "EMP_REFERENCE_PK" ON  "EMP_REFERENCE" ("ID")
/
CREATE UNIQUE INDEX  "EMP_SHORT_COURSE_PK" ON  "EMP_SHORT_COURSE" ("ID")
/
CREATE UNIQUE INDEX  "EMP_TRAINING_PK" ON  "EMP_TRAINING" ("ID")
/
CREATE UNIQUE INDEX  "EMP_WORK_EXP_PK" ON  "EMP_WORK_EXP" ("ID")
/
CREATE UNIQUE INDEX  "INSTALLMENTS_PK" ON  "INSTALLMENTS" ("ID")
/
CREATE UNIQUE INDEX  "LAND_SIZE_INFO_PK" ON  "LAND_SIZE_INFO" ("ID")
/
CREATE UNIQUE INDEX  "MENUS_PK" ON  "MENUS" ("ID")
/
CREATE UNIQUE INDEX  "MENU_PRIVILEGES_PK" ON  "MENU_PRIVILEGES" ("ID")
/
CREATE UNIQUE INDEX  "MODULES_PK" ON  "MODULES" ("ID")
/
CREATE UNIQUE INDEX  "MODULE_MENU_PRIVILEGES_PK" ON  "MODULE_MENU_PRIVILEGES" ("ID")
/
CREATE UNIQUE INDEX  "MONEY_RECEIPTS_PK" ON  "MONEY_RECEIPTS" ("ID")
/
CREATE UNIQUE INDEX  "RELIGION_PK" ON  "RELIGION" ("ID")
/
CREATE UNIQUE INDEX  "SCHEME_INFO_PK" ON  "SCHEME_INFO" ("ID")
/
CREATE UNIQUE INDEX  "SHIFT_CHANGE_PK" ON  "SHIFT_CHANGE" ("ID")
/
CREATE UNIQUE INDEX  "SHIFT_INFO_PK" ON  "SHIFT_INFO" ("ID")
/
CREATE UNIQUE INDEX  "SOFTWARE_INFO_INFO_PK" ON  "SOFTWARE_INFO" ("OWN_CODE")
/
CREATE UNIQUE INDEX  "SYS_C0012329" ON  "COMPANY_INFO" ("COM_EMAIL")
/
CREATE UNIQUE INDEX  "SYS_C0012338" ON  "APP_USERS" ("USERNAME")
/
CREATE UNIQUE INDEX  "SYS_C0012339" ON  "APP_USERS" ("EMAIL")
/
CREATE UNIQUE INDEX  "SYS_C0012340" ON  "APP_USERS" ("MOBILE_NO")
/
CREATE UNIQUE INDEX  "SYS_C0012342" ON  "MENU_PRIVILEGES" ("ROLE_ID")
/
CREATE UNIQUE INDEX  "SYS_C0012346" ON  "DEPT" ("DEPTNO")
/
CREATE UNIQUE INDEX  "SYS_C0012348" ON  "EMP" ("EMPNO")
/
CREATE UNIQUE INDEX  "SYS_C0012353" ON  "CUSTOMERS" ("EMAIL")
/
CREATE UNIQUE INDEX  "SYS_C0012354" ON  "CUSTOMERS" ("REGI_NO")
/
CREATE UNIQUE INDEX  "SYS_C0012404" ON  "TAB1" ("ID")
/
CREATE UNIQUE INDEX  "THANA_PK" ON  "THANA" ("ID")
/
CREATE UNIQUE INDEX  "TOWN_INFO_PK" ON  "TOWN_INFO" ("ID")
/
CREATE UNIQUE INDEX  "TRANSACTIONS_PK" ON  "TRANSACTIONS" ("ID")
/
CREATE UNIQUE INDEX  "USER_PRIVILEGES_PK" ON  "USER_PRIVILEGES" ("ID")
/
CREATE UNIQUE INDEX  "USER_PRIVILEGES_UQ" ON  "USER_PRIVILEGES" ("USER_ID", "MODULE_ID")
/
CREATE UNIQUE INDEX  "USER_ROLES_PK" ON  "USER_ROLES" ("ID")
/
CREATE UNIQUE INDEX  "UTILITY_HEAD_PK" ON  "UTILITY_HEAD" ("ID")
/
CREATE OR REPLACE EDITIONABLE PROCEDURE  "GET_COMPANY_AND_BRANCH_CODE" ( 
p_username in varchar2,  
p_company_code out varchar2,  
p_branch_code out varchar2 ) 
is 
dummy varchar2(1); 
l_emp_id number; 
begin 
    select 'x' into dummy 
    from app_users 
    where upper(username) = upper(p_username) 
    and user_type = 'S' 
    and company_code is null 
    and branch_code is null; 
    p_company_code := null; 
    p_branch_code := null; 
exception 
    when no_data_found then 
        begin 
            select company_code,  null into p_company_code, p_branch_code 
            from app_users 
            where upper(username) = upper(p_username) 
            and user_type = 'C' 
            and register_user = 1 
            and company_code is not null 
            and branch_code is null; 
        exception 
            when no_data_found then 
                begin 
                    select company_code,  null into p_company_code, p_branch_code 
                    from app_users 
                    where upper(username) = upper(p_username) 
                    and user_type = 'U' 
                    and emp_id is null 
                    and company_code is not null 
                    and branch_code is null; 
                exception 
                    when no_data_found then 
                        begin 
                            select emp_id into l_emp_id 
                            from app_users 
                            where upper(username) = upper(p_username) 
                            and user_type = 'U' 
                            and emp_id is not null; 
                             
                            if l_emp_id is not null then 
                                select company_code, branch_code 
                                into p_company_code, p_branch_code 
                                from emp_info 
                                where id = l_emp_id; 
                            end if; 
                            if p_company_code is null then 
                                select company_code into p_company_code 
                                from app_users 
                                where upper(username) = upper(p_username) 
                                and user_type = 'U' 
                                and emp_id is not null; 
                            end if; 
                        exception 
                            when no_data_found then 
                                p_company_code := null; 
                                p_branch_code   := null; 
                            when others then 
                            null; 
                        end;                             
                    when others then 
                    null;                     
                end; 
            when others then 
            null; 
        end; 
    when others then 
    null; 
end; 
/

 CREATE SEQUENCE   "DEPT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 50 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "AGREEMENTS_TGR" 
BEFORE INSERT OR UPDATE ON AGREEMENTS  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM AGREEMENTS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "AGREEMENTS_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "APP_USERS_TGR" 
BEFORE INSERT OR UPDATE ON APP_USERS 
FOR EACH ROW  
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM APP_USERS; 
    END IF;	 
	:NEW.PASSWORD := password_md5(:NEW.USERNAME, :NEW.PASSWORD); 
	IF :NEW.COMPANY_CODE IS NULL THEN 
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE'); 
	END IF; 
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE'); 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END; 

/
ALTER TRIGGER  "APP_USERS_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BANK_BRANCH_INFO_TGR" 
BEFORE INSERT OR UPDATE ON BANK_BRANCH_INFO  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN      
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "BANK_BRANCH_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BANK_INFO_TGR" 
BEFORE INSERT OR UPDATE ON BANK_INFO  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "BANK_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPANY_BRANCH_INFO_TGR" 
BEFORE INSERT OR UPDATE ON COMPANY_BRANCH_INFO 
FOR EACH ROW  
BEGIN 
IF INSERTING THEN 
    IF :NEW.BRANCH_CODE IS NULL THEN 
        SELECT LPAD(NVL(MAX(TO_NUMBER(BRANCH_CODE)),0)+1,5,'0') 
		INTO :NEW.BRANCH_CODE 
		FROM COMPANY_BRANCH_INFO; 
    END IF; 
    :NEW.CREATED_BY := V('APP_USER'); 
    :NEW.CREATED_ON := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY := V('APP_USER'); 
    :NEW.MODIFIED_ON := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END; 
 

/
ALTER TRIGGER  "COMPANY_BRANCH_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPANY_DEPARTMENT_INFO_TGR" 
BEFORE INSERT OR UPDATE ON COMPANY_DEPARTMENT_INFO  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM COMPANY_DEPARTMENT_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "COMPANY_DEPARTMENT_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPANY_INFO_TGR" 
BEFORE INSERT OR UPDATE ON COMPANY_INFO  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.COMPANY_CODE IS NULL THEN  
        SELECT SUBSTR(REPLACE(UPPER(:NEW.COM_NAME),' ', ''),1,3)||'-'||TO_CHAR(SYSDATE,'DDMMYYYY')||'-'||(NVL(MAX(TO_NUMBER(SUBSTR(COMPANY_CODE,14))),0)+1)  
		INTO :NEW.COMPANY_CODE  
		FROM COMPANY_INFO;  
    END IF;  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "COMPANY_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPANY_SECTION_INFO_TGR" 
BEFORE INSERT OR UPDATE ON COMPANY_SECTION_INFO  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM COMPANY_SECTION_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "COMPANY_SECTION_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "CUSTOMERS_TGR" 
BEFORE INSERT OR UPDATE ON CUSTOMERS  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM CUSTOMERS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "CUSTOMERS_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "DEPT_TRG1" 
              before insert on dept  
              for each row  
              begin  
                  if :new.deptno is null then  
                      select dept_seq.nextval into :new.deptno from sys.dual;  
                 end if;  
              end;  
 

/
ALTER TRIGGER  "DEPT_TRG1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "DESIGNATION_TGR" 
BEFORE INSERT OR UPDATE ON DESIGNATION  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM DESIGNATION;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "DESIGNATION_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "DISTRICT_TGR" 
BEFORE INSERT OR UPDATE ON DISTRICT  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM DISTRICT;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "DISTRICT_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "DIVISION_TGR" 
BEFORE INSERT OR UPDATE ON DIVISION 
FOR EACH ROW  
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM DIVISION; 
    END IF; 
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE'); 
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE'); 
    :NEW.CREATED_BY := V('APP_USER'); 
    :NEW.CREATED_ON := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY := V('APP_USER'); 
    :NEW.MODIFIED_ON := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END; 

/
ALTER TRIGGER  "DIVISION_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EDUCATIONAL_INSTITUTION_TGR" 
BEFORE INSERT OR UPDATE ON Educational_institution
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    IF :NEW.ID IS NULL THEN
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM Educational_institution;
    END IF;
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EDUCATIONAL_INSTITUTION_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EDUCATION_LEVEL_TGR" 
BEFORE INSERT OR UPDATE ON EDUCATION_LEVEL  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM EDUCATION_LEVEL;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "EDUCATION_LEVEL_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_ADDRESS_TGR" 
BEFORE INSERT OR UPDATE ON EMP_ADDRESS
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EMP_ADDRESS_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_EDUCATION_TGR" 
BEFORE INSERT OR UPDATE ON EMP_EDUCATION
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EMP_EDUCATION_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_FAMILY_TGR" 
BEFORE INSERT OR UPDATE ON EMP_FAMILY
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EMP_FAMILY_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_INFO_TGR" 
BEFORE INSERT OR UPDATE ON EMP_INFO
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EMP_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_IT_LITERACY_TGR" 
BEFORE INSERT OR UPDATE ON EMP_IT_LITERACY
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EMP_IT_LITERACY_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_LANGUAGE_TGR" 
BEFORE INSERT OR UPDATE ON EMP_LANGUAGE
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EMP_LANGUAGE_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_REFERENCE_TGR" 
BEFORE INSERT OR UPDATE ON EMP_REFERENCE
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EMP_REFERENCE_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_SHORT_COURSE_TGR" 
BEFORE INSERT OR UPDATE ON EMP_SHORT_COURSE
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EMP_SHORT_COURSE_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_TRAINING_TGR" 
BEFORE INSERT OR UPDATE ON EMP_TRAINING
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EMP_TRAINING_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_TRG1" 
              before insert on emp  
              for each row  
              begin  
                  if :new.empno is null then  
                      select emp_seq.nextval into :new.empno from sys.dual;  
                 end if;  
              end;  
 

/
ALTER TRIGGER  "EMP_TRG1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EMP_WORK_EXP_TGR" 
BEFORE INSERT OR UPDATE ON EMP_WORK_EXP
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "EMP_WORK_EXP_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "INSTALLMENTS_TGR" 
BEFORE INSERT OR UPDATE ON INSTALLMENTS  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM INSTALLMENTS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "INSTALLMENTS_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "LAND_SIZE_INFO_TGR" 
BEFORE INSERT OR UPDATE ON LAND_SIZE_INFO  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM LAND_SIZE_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "LAND_SIZE_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "MENUS_TGR" 
BEFORE INSERT OR UPDATE ON MENUS  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MENUS;  
    END IF;	  
    :NEW.CREATED_BY   := V('APP_USER');  
    :NEW.CREATED_ON   := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY   := V('APP_USER');  
    :NEW.MODIFIED_ON   := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "MENUS_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "MENU_PRIVILEGES_TGR" 
BEFORE INSERT OR UPDATE ON MENU_PRIVILEGES  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MENU_PRIVILEGES;  
    END IF;	  
    :NEW.CREATED_BY   := V('APP_USER');  
    :NEW.CREATED_ON   := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY   := V('APP_USER');  
    :NEW.MODIFIED_ON   := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "MENU_PRIVILEGES_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "MODULES_TGR" 
BEFORE INSERT OR UPDATE ON MODULES 
FOR EACH ROW  
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MODULES; 
    END IF;	 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END; 
 

/
ALTER TRIGGER  "MODULES_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "MODULE_MENU_PRIVILEGES_TGR" 
BEFORE INSERT OR UPDATE ON MODULE_MENU_PRIVILEGES 
FOR EACH ROW  
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MODULE_MENU_PRIVILEGES; 
    END IF;	 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END; 
 

/
ALTER TRIGGER  "MODULE_MENU_PRIVILEGES_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "MONEY_RECEIPTS_TGR" 
BEFORE INSERT OR UPDATE ON MONEY_RECEIPTS  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM MONEY_RECEIPTS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "MONEY_RECEIPTS_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "MONEY_TRANSFERS_TGR" 
BEFORE INSERT OR UPDATE ON MONEY_TRANSFERS  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "MONEY_TRANSFERS_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "RELIGION_TGR" 
BEFORE INSERT OR UPDATE ON Religion
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    IF :NEW.ID IS NULL THEN
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM Religion;
    END IF;
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "RELIGION_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "SCHEME_INFO_TGR" 
BEFORE INSERT OR UPDATE ON SCHEME_INFO  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM SCHEME_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "SCHEME_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "SHIFT_CHANGE_TGR" 
BEFORE INSERT OR UPDATE ON SHIFT_CHANGE
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "SHIFT_CHANGE_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "SHIFT_INFO_TGR" 
BEFORE INSERT OR UPDATE ON SHIFT_INFO
FOR EACH ROW 
BEGIN
IF INSERTING THEN
    :NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');
    :NEW.CREATED_BY := V('APP_USER');
    :NEW.CREATED_ON := SYSDATE; 
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
IF UPDATING THEN
    :NEW.MODIFIED_BY := V('APP_USER');
    :NEW.MODIFIED_ON := SYSDATE; 
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');
END IF;
EXCEPTION
WHEN OTHERS THEN
NULL;
END;
/
ALTER TRIGGER  "SHIFT_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "SOFTWARE_INFO_TGR" 
BEFORE INSERT OR UPDATE ON SOFTWARE_INFO 
FOR EACH ROW  
BEGIN 
IF INSERTING THEN 
    :NEW.CREATED_BY := V('APP_USER'); 
    :NEW.CREATED_ON := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY := V('APP_USER'); 
    :NEW.MODIFIED_ON := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END; 

/
ALTER TRIGGER  "SOFTWARE_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "THANA_TGR" 
BEFORE INSERT OR UPDATE ON THANA  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM THANA;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "THANA_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "TOWN_INFO_TGR" 
BEFORE INSERT OR UPDATE ON TOWN_INFO  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM TOWN_INFO;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "TOWN_INFO_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "TRANSACTIONS_TGR" 
BEFORE INSERT OR UPDATE ON TRANSACTIONS  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM TRANSACTIONS;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "TRANSACTIONS_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "USER_PRIVILEGES_TGR" 
BEFORE INSERT OR UPDATE ON USER_PRIVILEGES 
FOR EACH ROW  
BEGIN 
IF INSERTING THEN 
    IF :NEW.ID IS NULL THEN 
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM USER_PRIVILEGES; 
    END IF; 
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE'); 
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');	 
    :NEW.CREATED_BY   := V('APP_USER'); 
    :NEW.CREATED_ON   := SYSDATE;  
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
IF UPDATING THEN 
    :NEW.MODIFIED_BY   := V('APP_USER'); 
    :NEW.MODIFIED_ON   := SYSDATE;  
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM'); 
END IF; 
EXCEPTION 
WHEN OTHERS THEN 
NULL; 
END; 

/
ALTER TRIGGER  "USER_PRIVILEGES_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "USER_ROLES_TGR" 
BEFORE INSERT OR UPDATE ON USER_ROLES  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM USER_ROLES;  
    END IF;  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "USER_ROLES_TGR" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "UTILITY_HEAD_TGR" 
BEFORE INSERT OR UPDATE ON UTILITY_HEAD  
FOR EACH ROW   
BEGIN  
IF INSERTING THEN  
    IF :NEW.ID IS NULL THEN  
        SELECT NVL(MAX(ID),0)+1 INTO :NEW.ID FROM UTILITY_HEAD;  
    END IF;  
	:NEW.COMPANY_CODE := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_CODE');  
    :NEW.BRANCH_CODE  := APEX_UTIL.GET_SESSION_STATE('GLOBAL_COMPANY_BRANCH_CODE');  
    :NEW.CREATED_BY := V('APP_USER');  
    :NEW.CREATED_ON := SYSDATE;   
    :NEW.CREATED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
IF UPDATING THEN  
    :NEW.MODIFIED_BY := V('APP_USER');  
    :NEW.MODIFIED_ON := SYSDATE;   
    :NEW.MODIFIED_TIME := TO_CHAR(SYSDATE, 'HH12:MI:SS AM');  
END IF;  
EXCEPTION  
WHEN OTHERS THEN  
NULL;  
END;  
  
 

/
ALTER TRIGGER  "UTILITY_HEAD_TGR" ENABLE
/
